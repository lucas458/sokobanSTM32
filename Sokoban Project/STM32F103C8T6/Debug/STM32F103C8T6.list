
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000486c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be4  08004be4  00021814  2**0
                  CONTENTS
  4 .ARM          00000000  08004be4  08004be4  00021814  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be4  08004be4  00021814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001814  20000000  08004bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20001814  08006400  00021814  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  08006400  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021814  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002183d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ac3  00000000  00000000  00021880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001880  00000000  00000000  0002b343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002cbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000770  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e5c  00000000  00000000  0002dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afc8  00000000  00000000  00045b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086330  00000000  00000000  00050b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fe4  00000000  00000000  000d6e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d9e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20001814 	.word	0x20001814
 8000128:	00000000 	.word	0x00000000
 800012c:	08004960 	.word	0x08004960

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20001818 	.word	0x20001818
 8000148:	08004960 	.word	0x08004960

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <tft_cmd>:
#endif




void tft_cmd( unsigned char data ){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016c:	4808      	ldr	r0, [pc, #32]	; (8000190 <tft_cmd+0x34>)
 800016e:	f002 fb72 	bl	8002856 <HAL_GPIO_WritePin>
    //NOP();
    HAL_SPI_Transmit(&hspi1, (uint8_t[]){data}, 1, 1000);
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	733b      	strb	r3, [r7, #12]
 8000176:	f107 010c 	add.w	r1, r7, #12
 800017a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	; (8000194 <tft_cmd+0x38>)
 8000182:	f003 f815 	bl	80031b0 <HAL_SPI_Transmit>
}
 8000186:	bf00      	nop
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010c00 	.word	0x40010c00
 8000194:	20001830 	.word	0x20001830

08000198 <tft_data>:


void tft_data( unsigned char data ){
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <tft_data+0x34>)
 80001aa:	f002 fb54 	bl	8002856 <HAL_GPIO_WritePin>
    // NOP();

    HAL_SPI_Transmit(&hspi1, (uint8_t[]){data}, 1, 1000);
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	733b      	strb	r3, [r7, #12]
 80001b2:	f107 010c 	add.w	r1, r7, #12
 80001b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ba:	2201      	movs	r2, #1
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <tft_data+0x38>)
 80001be:	f002 fff7 	bl	80031b0 <HAL_SPI_Transmit>

}
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	20001830 	.word	0x20001830

080001d4 <tft_data16>:


void tft_data16( unsigned char msb, unsigned char lsb ){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <tft_data16+0x3c>)
 80001ec:	f002 fb33 	bl	8002856 <HAL_GPIO_WritePin>
    // NOP();
    HAL_SPI_Transmit(&hspi1, (uint8_t[]){msb, lsb}, 2, 1000);
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	733b      	strb	r3, [r7, #12]
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	737b      	strb	r3, [r7, #13]
 80001f8:	f107 010c 	add.w	r1, r7, #12
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	2202      	movs	r2, #2
 8000202:	4804      	ldr	r0, [pc, #16]	; (8000214 <tft_data16+0x40>)
 8000204:	f002 ffd4 	bl	80031b0 <HAL_SPI_Transmit>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00
 8000214:	20001830 	.word	0x20001830

08000218 <tft_init>:


void tft_init(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

    //************* Reset LCD Driver ****************//
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000222:	4833      	ldr	r0, [pc, #204]	; (80002f0 <tft_init+0xd8>)
 8000224:	f002 fb17 	bl	8002856 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000228:	2001      	movs	r0, #1
 800022a:	f002 f871 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000234:	482e      	ldr	r0, [pc, #184]	; (80002f0 <tft_init+0xd8>)
 8000236:	f002 fb0e 	bl	8002856 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800023a:	200a      	movs	r0, #10
 800023c:	f002 f868 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	482a      	ldr	r0, [pc, #168]	; (80002f0 <tft_init+0xd8>)
 8000248:	f002 fb05 	bl	8002856 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800024c:	2078      	movs	r0, #120	; 0x78
 800024e:	f002 f85f 	bl	8002310 <HAL_Delay>

    /* INIT */

    // Software Reset
    tft_cmd(0x01);
 8000252:	2001      	movs	r0, #1
 8000254:	f7ff ff82 	bl	800015c <tft_cmd>
    HAL_Delay(150);
 8000258:	2096      	movs	r0, #150	; 0x96
 800025a:	f002 f859 	bl	8002310 <HAL_Delay>

    // Sleep out
    tft_cmd(0x11);
 800025e:	2011      	movs	r0, #17
 8000260:	f7ff ff7c 	bl	800015c <tft_cmd>
    HAL_Delay(500);
 8000264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000268:	f002 f852 	bl	8002310 <HAL_Delay>

    // Interface pixel format
    tft_cmd(0x3A);
 800026c:	203a      	movs	r0, #58	; 0x3a
 800026e:	f7ff ff75 	bl	800015c <tft_cmd>
    tft_data(0x55);
 8000272:	2055      	movs	r0, #85	; 0x55
 8000274:	f7ff ff90 	bl	8000198 <tft_data>
    HAL_Delay(10);
 8000278:	200a      	movs	r0, #10
 800027a:	f002 f849 	bl	8002310 <HAL_Delay>

    // Memory data access control
    tft_cmd(0x36);
 800027e:	2036      	movs	r0, #54	; 0x36
 8000280:	f7ff ff6c 	bl	800015c <tft_cmd>
    //tft_data(0x08);
	tft_data(0x00);
 8000284:	2000      	movs	r0, #0
 8000286:	f7ff ff87 	bl	8000198 <tft_data>

    // CASET
    tft_cmd(0x2A);
 800028a:	202a      	movs	r0, #42	; 0x2a
 800028c:	f7ff ff66 	bl	800015c <tft_cmd>
    tft_data(0x00);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ff81 	bl	8000198 <tft_data>
    tft_data(0);
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff7e 	bl	8000198 <tft_data>
    tft_data(0);
 800029c:	2000      	movs	r0, #0
 800029e:	f7ff ff7b 	bl	8000198 <tft_data>
    tft_data(240);
 80002a2:	20f0      	movs	r0, #240	; 0xf0
 80002a4:	f7ff ff78 	bl	8000198 <tft_data>

    // RASET
    tft_cmd(0x2B);
 80002a8:	202b      	movs	r0, #43	; 0x2b
 80002aa:	f7ff ff57 	bl	800015c <tft_cmd>
    tft_data(0x00);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f7ff ff72 	bl	8000198 <tft_data>
    tft_data(0);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f7ff ff6f 	bl	8000198 <tft_data>
    tft_data(0);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ff6c 	bl	8000198 <tft_data>
    tft_data(240);
 80002c0:	20f0      	movs	r0, #240	; 0xf0
 80002c2:	f7ff ff69 	bl	8000198 <tft_data>

    // Display inversion - on
    tft_cmd(0x21);
 80002c6:	2021      	movs	r0, #33	; 0x21
 80002c8:	f7ff ff48 	bl	800015c <tft_cmd>
    HAL_Delay(10);
 80002cc:	200a      	movs	r0, #10
 80002ce:	f002 f81f 	bl	8002310 <HAL_Delay>

    // Partial off (Normal)
    tft_cmd(0x13);
 80002d2:	2013      	movs	r0, #19
 80002d4:	f7ff ff42 	bl	800015c <tft_cmd>
    HAL_Delay(10);
 80002d8:	200a      	movs	r0, #10
 80002da:	f002 f819 	bl	8002310 <HAL_Delay>

    // Display on
    tft_cmd(0x29);
 80002de:	2029      	movs	r0, #41	; 0x29
 80002e0:	f7ff ff3c 	bl	800015c <tft_cmd>
    HAL_Delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e8:	f002 f812 	bl	8002310 <HAL_Delay>


    //tft_cmd(0x2c); //memory write
    //__delay_ms(200);

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <tft_setAddrWindow>:


void tft_setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4604      	mov	r4, r0
 80002fc:	4608      	mov	r0, r1
 80002fe:	4611      	mov	r1, r2
 8000300:	461a      	mov	r2, r3
 8000302:	4623      	mov	r3, r4
 8000304:	71fb      	strb	r3, [r7, #7]
 8000306:	4603      	mov	r3, r0
 8000308:	71bb      	strb	r3, [r7, #6]
 800030a:	460b      	mov	r3, r1
 800030c:	717b      	strb	r3, [r7, #5]
 800030e:	4613      	mov	r3, r2
 8000310:	713b      	strb	r3, [r7, #4]
	uint16_t x_start = x0 + 0, x_end = x1 + 0;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	81fb      	strh	r3, [r7, #14]
 8000316:	797b      	ldrb	r3, [r7, #5]
 8000318:	81bb      	strh	r3, [r7, #12]
	uint16_t y_start = y0 + 0, y_end = y1 + 0;
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	817b      	strh	r3, [r7, #10]
 800031e:	793b      	ldrb	r3, [r7, #4]
 8000320:	813b      	strh	r3, [r7, #8]

	tft_cmd(0x2A); // Column addr set
 8000322:	202a      	movs	r0, #42	; 0x2a
 8000324:	f7ff ff1a 	bl	800015c <tft_cmd>
	tft_data(x_start >> 8);
 8000328:	89fb      	ldrh	r3, [r7, #14]
 800032a:	0a1b      	lsrs	r3, r3, #8
 800032c:	b29b      	uxth	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff31 	bl	8000198 <tft_data>
	tft_data(x_start & 0xFF);     // XSTART
 8000336:	89fb      	ldrh	r3, [r7, #14]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff2c 	bl	8000198 <tft_data>
	tft_data(x_end >> 8);
 8000340:	89bb      	ldrh	r3, [r7, #12]
 8000342:	0a1b      	lsrs	r3, r3, #8
 8000344:	b29b      	uxth	r3, r3
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff25 	bl	8000198 <tft_data>
	tft_data(x_end & 0xFF);     // XEND
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff20 	bl	8000198 <tft_data>

	tft_cmd(0x2B); // Row addr set
 8000358:	202b      	movs	r0, #43	; 0x2b
 800035a:	f7ff feff 	bl	800015c <tft_cmd>
	tft_data(y_start >> 8);
 800035e:	897b      	ldrh	r3, [r7, #10]
 8000360:	0a1b      	lsrs	r3, r3, #8
 8000362:	b29b      	uxth	r3, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff16 	bl	8000198 <tft_data>
	tft_data(y_start & 0xFF);     // YSTART
 800036c:	897b      	ldrh	r3, [r7, #10]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff11 	bl	8000198 <tft_data>
	tft_data(y_end >> 8);
 8000376:	893b      	ldrh	r3, [r7, #8]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	b29b      	uxth	r3, r3
 800037c:	b2db      	uxtb	r3, r3
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff0a 	bl	8000198 <tft_data>
	tft_data(y_end & 0xFF);     // YEND
 8000384:	893b      	ldrh	r3, [r7, #8]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff05 	bl	8000198 <tft_data>

	tft_cmd(0x2c); // write to RAM
 800038e:	202c      	movs	r0, #44	; 0x2c
 8000390:	f7ff fee4 	bl	800015c <tft_cmd>

}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bd90      	pop	{r4, r7, pc}

0800039c <tft_pixel>:


void tft_pixel(int16_t x, int16_t y, uint16_t color){
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
 80003a6:	460b      	mov	r3, r1
 80003a8:	80bb      	strh	r3, [r7, #4]
 80003aa:	4613      	mov	r3, r2
 80003ac:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= 240) || (y < 0) || (y >= 240)) return;
 80003ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	db24      	blt.n	8000400 <tft_pixel+0x64>
 80003b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ba:	2bef      	cmp	r3, #239	; 0xef
 80003bc:	dc20      	bgt.n	8000400 <tft_pixel+0x64>
 80003be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db1c      	blt.n	8000400 <tft_pixel+0x64>
 80003c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003ca:	2bef      	cmp	r3, #239	; 0xef
 80003cc:	dc18      	bgt.n	8000400 <tft_pixel+0x64>
	tft_setAddrWindow(x,y,x+1,y+1);
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2d8      	uxtb	r0, r3
 80003d2:	88bb      	ldrh	r3, [r7, #4]
 80003d4:	b2d9      	uxtb	r1, r3
 80003d6:	88fb      	ldrh	r3, [r7, #6]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3301      	adds	r3, #1
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	3301      	adds	r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f7ff ff85 	bl	80002f4 <tft_setAddrWindow>
	tft_data16(color >> 8, color);
 80003ea:	887b      	ldrh	r3, [r7, #2]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	887a      	ldrh	r2, [r7, #2]
 80003f4:	b2d2      	uxtb	r2, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff feeb 	bl	80001d4 <tft_data16>
 80003fe:	e000      	b.n	8000402 <tft_pixel+0x66>
	if((x < 0) ||(x >= 240) || (y < 0) || (y >= 240)) return;
 8000400:	bf00      	nop
}
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <tft_fillRect>:


void tft_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	4604      	mov	r4, r0
 8000410:	4608      	mov	r0, r1
 8000412:	4611      	mov	r1, r2
 8000414:	461a      	mov	r2, r3
 8000416:	4623      	mov	r3, r4
 8000418:	80fb      	strh	r3, [r7, #6]
 800041a:	4603      	mov	r3, r0
 800041c:	80bb      	strh	r3, [r7, #4]
 800041e:	460b      	mov	r3, r1
 8000420:	807b      	strh	r3, [r7, #2]
 8000422:	4613      	mov	r3, r2
 8000424:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= 240) || (y >= 240)) return;
 8000426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800042a:	2bef      	cmp	r3, #239	; 0xef
 800042c:	dc59      	bgt.n	80004e2 <tft_fillRect+0xda>
 800042e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000432:	2bef      	cmp	r3, #239	; 0xef
 8000434:	dc55      	bgt.n	80004e2 <tft_fillRect+0xda>
	if((x + w - 1) >= 240)  w = 240  - x;
 8000436:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800043a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800043e:	4413      	add	r3, r2
 8000440:	2bf0      	cmp	r3, #240	; 0xf0
 8000442:	dd04      	ble.n	800044e <tft_fillRect+0x46>
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800044a:	b29b      	uxth	r3, r3
 800044c:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= 240) h = 240 - y;
 800044e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000452:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000456:	4413      	add	r3, r2
 8000458:	2bf0      	cmp	r3, #240	; 0xf0
 800045a:	dd04      	ble.n	8000466 <tft_fillRect+0x5e>
 800045c:	88bb      	ldrh	r3, [r7, #4]
 800045e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000462:	b29b      	uxth	r3, r3
 8000464:	803b      	strh	r3, [r7, #0]

	tft_setAddrWindow(x, y, x+w-1, y+h-1);
 8000466:	88fb      	ldrh	r3, [r7, #6]
 8000468:	b2d8      	uxtb	r0, r3
 800046a:	88bb      	ldrh	r3, [r7, #4]
 800046c:	b2d9      	uxtb	r1, r3
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	b2da      	uxtb	r2, r3
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4413      	add	r3, r2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	3b01      	subs	r3, #1
 800047c:	b2dc      	uxtb	r4, r3
 800047e:	88bb      	ldrh	r3, [r7, #4]
 8000480:	b2da      	uxtb	r2, r3
 8000482:	883b      	ldrh	r3, [r7, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4413      	add	r3, r2
 8000488:	b2db      	uxtb	r3, r3
 800048a:	3b01      	subs	r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4622      	mov	r2, r4
 8000490:	f7ff ff30 	bl	80002f4 <tft_setAddrWindow>

	uint8_t hi = color >> 8, lo = color;
 8000494:	8c3b      	ldrh	r3, [r7, #32]
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	b29b      	uxth	r3, r3
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	8c3b      	ldrh	r3, [r7, #32]
 800049e:	73bb      	strb	r3, [r7, #14]

	for(y=h; y>0; y--) {
 80004a0:	883b      	ldrh	r3, [r7, #0]
 80004a2:	80bb      	strh	r3, [r7, #4]
 80004a4:	e018      	b.n	80004d8 <tft_fillRect+0xd0>
	  for(x=w; x>0; x--) {
 80004a6:	887b      	ldrh	r3, [r7, #2]
 80004a8:	80fb      	strh	r3, [r7, #6]
 80004aa:	e00b      	b.n	80004c4 <tft_fillRect+0xbc>
		  tft_data16(hi, lo);
 80004ac:	7bba      	ldrb	r2, [r7, #14]
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe8e 	bl	80001d4 <tft_data16>
	  for(x=w; x>0; x--) {
 80004b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	3b01      	subs	r3, #1
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	80fb      	strh	r3, [r7, #6]
 80004c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dcef      	bgt.n	80004ac <tft_fillRect+0xa4>
	for(y=h; y>0; y--) {
 80004cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	3b01      	subs	r3, #1
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	80bb      	strh	r3, [r7, #4]
 80004d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dce2      	bgt.n	80004a6 <tft_fillRect+0x9e>
 80004e0:	e000      	b.n	80004e4 <tft_fillRect+0xdc>
	if((x >= 240) || (y >= 240)) return;
 80004e2:	bf00      	nop
	  }
	}



}
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd90      	pop	{r4, r7, pc}
	...

080004ec <tft_drawChar>:





void tft_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size){
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	4604      	mov	r4, r0
 80004f4:	4608      	mov	r0, r1
 80004f6:	4611      	mov	r1, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	4623      	mov	r3, r4
 80004fc:	80fb      	strh	r3, [r7, #6]
 80004fe:	4603      	mov	r3, r0
 8000500:	80bb      	strh	r3, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
 8000506:	4613      	mov	r3, r2
 8000508:	803b      	strh	r3, [r7, #0]
  if((x >= 240)		|| // Clip right
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	2bef      	cmp	r3, #239	; 0xef
 8000510:	f300 80cf 	bgt.w	80006b2 <tft_drawChar+0x1c6>
 8000514:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000518:	2bef      	cmp	r3, #239	; 0xef
 800051a:	f300 80ca 	bgt.w	80006b2 <tft_drawChar+0x1c6>
     (y >= 240)		|| // Clip bottom
     ((x + 6 * size - 1) < 0)	|| // Clip left
 800051e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000522:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000526:	4613      	mov	r3, r2
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	4413      	add	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	440b      	add	r3, r1
     (y >= 240)		|| // Clip bottom
 8000530:	2b00      	cmp	r3, #0
 8000532:	f340 80be 	ble.w	80006b2 <tft_drawChar+0x1c6>
     ((y + 8 * size - 1) < 0))     // Clip top
 8000536:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800053a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0)	|| // Clip left
 8000542:	2b00      	cmp	r3, #0
 8000544:	f340 80b5 	ble.w	80006b2 <tft_drawChar+0x1c6>
    return;

  for (int8_t i=0; i<6; i++ ) {
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e0ab      	b.n	80006a6 <tft_drawChar+0x1ba>
    uint8_t line;
    if (i == 5)
 800054e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000552:	2b05      	cmp	r3, #5
 8000554:	d102      	bne.n	800055c <tft_drawChar+0x70>
      line = 0x0;
 8000556:	2300      	movs	r3, #0
 8000558:	73bb      	strb	r3, [r7, #14]
 800055a:	e00b      	b.n	8000574 <tft_drawChar+0x88>
    else
      line = Font[(c - 0x20)*5 + i];
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	f1a3 0220 	sub.w	r2, r3, #32
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	441a      	add	r2, r3
 8000568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800056c:	4413      	add	r3, r2
 800056e:	4a53      	ldr	r2, [pc, #332]	; (80006bc <tft_drawChar+0x1d0>)
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000574:	2300      	movs	r3, #0
 8000576:	737b      	strb	r3, [r7, #13]
 8000578:	e08a      	b.n	8000690 <tft_drawChar+0x1a4>
      if (line & 0x1) {
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d03c      	beq.n	80005fe <tft_drawChar+0x112>
        if (size == 1) // default size
 8000584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000588:	2b01      	cmp	r3, #1
 800058a:	d112      	bne.n	80005b2 <tft_drawChar+0xc6>
          tft_pixel(x+i, y+j, color);
 800058c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000590:	b29a      	uxth	r2, r3
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	4413      	add	r3, r2
 8000596:	b29b      	uxth	r3, r3
 8000598:	b218      	sxth	r0, r3
 800059a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	883a      	ldrh	r2, [r7, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	f7ff fef6 	bl	800039c <tft_pixel>
 80005b0:	e065      	b.n	800067e <tft_drawChar+0x192>

        else {  // big size
          tft_fillRect(x+(i*size), y+(j*size), size, size, color);
 80005b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80005bc:	b292      	uxth	r2, r2
 80005be:	fb02 f303 	mul.w	r3, r2, r3
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	4413      	add	r3, r2
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	b218      	sxth	r0, r3
 80005cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80005d6:	b292      	uxth	r2, r2
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	b29a      	uxth	r2, r3
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	b219      	sxth	r1, r3
 80005e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005f0:	b21c      	sxth	r4, r3
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4623      	mov	r3, r4
 80005f8:	f7ff ff06 	bl	8000408 <tft_fillRect>
 80005fc:	e03f      	b.n	800067e <tft_drawChar+0x192>
        }
      } else if (bg != color) {
 80005fe:	8c3a      	ldrh	r2, [r7, #32]
 8000600:	883b      	ldrh	r3, [r7, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d03b      	beq.n	800067e <tft_drawChar+0x192>
        if (size == 1) // default size
 8000606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800060a:	2b01      	cmp	r3, #1
 800060c:	d112      	bne.n	8000634 <tft_drawChar+0x148>
          tft_pixel(x+i, y+j, bg);
 800060e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000612:	b29a      	uxth	r2, r3
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4413      	add	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	b218      	sxth	r0, r3
 800061c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000620:	b29a      	uxth	r2, r3
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	b29b      	uxth	r3, r3
 8000628:	b21b      	sxth	r3, r3
 800062a:	8c3a      	ldrh	r2, [r7, #32]
 800062c:	4619      	mov	r1, r3
 800062e:	f7ff feb5 	bl	800039c <tft_pixel>
 8000632:	e024      	b.n	800067e <tft_drawChar+0x192>
        else {  // big size
          tft_fillRect(x+i*size, y+j*size, size, size, bg);
 8000634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800063e:	b292      	uxth	r2, r2
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	b29a      	uxth	r2, r3
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4413      	add	r3, r2
 800064a:	b29b      	uxth	r3, r3
 800064c:	b218      	sxth	r0, r3
 800064e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000658:	b292      	uxth	r2, r2
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	b29a      	uxth	r2, r3
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	b219      	sxth	r1, r3
 8000668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800066c:	b21a      	sxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000672:	b21c      	sxth	r4, r3
 8000674:	8c3b      	ldrh	r3, [r7, #32]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4623      	mov	r3, r4
 800067a:	f7ff fec5 	bl	8000408 <tft_fillRect>
        }
      }
      line >>= 1;
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000684:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	737b      	strb	r3, [r7, #13]
 8000690:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000694:	2b07      	cmp	r3, #7
 8000696:	f77f af70 	ble.w	800057a <tft_drawChar+0x8e>
  for (int8_t i=0; i<6; i++ ) {
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	2b05      	cmp	r3, #5
 80006ac:	f77f af4f 	ble.w	800054e <tft_drawChar+0x62>
 80006b0:	e000      	b.n	80006b4 <tft_drawChar+0x1c8>
    return;
 80006b2:	bf00      	nop
    }
  }
}
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	080049a8 	.word	0x080049a8

080006c0 <tft_drawText>:
char _wrap = 0;
void tft_setTextWrap(char s){
	_wrap = s;
}

void tft_drawText(uint8_t x, uint8_t y, const char *_text, uint16_t color, uint16_t bg, uint8_t size) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b087      	sub	sp, #28
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	603a      	str	r2, [r7, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	80bb      	strh	r3, [r7, #4]
  uint8_t cursor_x, cursor_y;
  uint16_t textsize, i;
  cursor_x = x, cursor_y = y;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	73bb      	strb	r3, [r7, #14]
  textsize = strlen(_text);
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f7ff fd34 	bl	800014c <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	817b      	strh	r3, [r7, #10]
  for(i = 0; i < textsize; i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	81bb      	strh	r3, [r7, #12]
 80006ec:	e049      	b.n	8000782 <tft_drawText+0xc2>
    if(_wrap && ((cursor_x + size * 5) > 240)) {
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <tft_drawText+0xd4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d020      	beq.n	8000738 <tft_drawText+0x78>
 80006f6:	7bf9      	ldrb	r1, [r7, #15]
 80006f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	2bf0      	cmp	r3, #240	; 0xf0
 8000706:	dd17      	ble.n	8000738 <tft_drawText+0x78>
      cursor_x = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
      cursor_y = cursor_y + size * 7 + 3 ;
 800070c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000710:	461a      	mov	r2, r3
 8000712:	00d2      	lsls	r2, r2, #3
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b2da      	uxtb	r2, r3
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	4413      	add	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3303      	adds	r3, #3
 8000720:	73bb      	strb	r3, [r7, #14]
      if(cursor_y > 240) cursor_y = 240;
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	2bf0      	cmp	r3, #240	; 0xf0
 8000726:	d901      	bls.n	800072c <tft_drawText+0x6c>
 8000728:	23f0      	movs	r3, #240	; 0xf0
 800072a:	73bb      	strb	r3, [r7, #14]
      if(_text[i] == 0x20) {
 800072c:	89bb      	ldrh	r3, [r7, #12]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b20      	cmp	r3, #32
 8000736:	d020      	beq.n	800077a <tft_drawText+0xba>
        continue;
      }
    }
    tft_drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b218      	sxth	r0, r3
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	b219      	sxth	r1, r3
 8000740:	89bb      	ldrh	r3, [r7, #12]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	4413      	add	r3, r2
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	88bc      	ldrh	r4, [r7, #4]
 800074a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	8c3b      	ldrh	r3, [r7, #32]
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	4623      	mov	r3, r4
 8000756:	f7ff fec9 	bl	80004ec <tft_drawChar>
    cursor_x = cursor_x + size * 6;
 800075a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800075e:	461a      	mov	r2, r3
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	4413      	add	r3, r2
 800076c:	73fb      	strb	r3, [r7, #15]
    if(cursor_x > 240) {
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2bf0      	cmp	r3, #240	; 0xf0
 8000772:	d903      	bls.n	800077c <tft_drawText+0xbc>
      cursor_x = 240;
 8000774:	23f0      	movs	r3, #240	; 0xf0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e000      	b.n	800077c <tft_drawText+0xbc>
        continue;
 800077a:	bf00      	nop
  for(i = 0; i < textsize; i++){
 800077c:	89bb      	ldrh	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	81bb      	strh	r3, [r7, #12]
 8000782:	89ba      	ldrh	r2, [r7, #12]
 8000784:	897b      	ldrh	r3, [r7, #10]
 8000786:	429a      	cmp	r2, r3
 8000788:	d3b1      	bcc.n	80006ee <tft_drawText+0x2e>
    }
  }
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	200018d0 	.word	0x200018d0

08000798 <renderBitmap>:





void renderBitmap(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap){
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	4604      	mov	r4, r0
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4623      	mov	r3, r4
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	4603      	mov	r3, r0
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	807b      	strh	r3, [r7, #2]
 80007b2:	4613      	mov	r3, r2
 80007b4:	803b      	strh	r3, [r7, #0]
	if((x >= 240)		|| // Clip right
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	2bef      	cmp	r3, #239	; 0xef
 80007ba:	d85b      	bhi.n	8000874 <renderBitmap+0xdc>
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	2bef      	cmp	r3, #239	; 0xef
 80007c0:	d858      	bhi.n	8000874 <renderBitmap+0xdc>
		 (y >= 240)		|| // Clip bottom
		 ((x + w - 1) < 0)	|| // Clip left
 80007c2:	88fa      	ldrh	r2, [r7, #6]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	4413      	add	r3, r2
		 (y >= 240)		|| // Clip bottom
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dd53      	ble.n	8000874 <renderBitmap+0xdc>
		 ((y + h - 1) < 0))     // Clip top
 80007cc:	88ba      	ldrh	r2, [r7, #4]
 80007ce:	883b      	ldrh	r3, [r7, #0]
 80007d0:	4413      	add	r3, r2
		 ((x + w - 1) < 0)	|| // Clip left
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dd4e      	ble.n	8000874 <renderBitmap+0xdc>
		return;

	for (uint16_t moveY = 0; moveY < h; moveY++){
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e046      	b.n	800086a <renderBitmap+0xd2>
		for (uint16_t moveX = 0; moveX < w; moveX++){
 80007dc:	2300      	movs	r3, #0
 80007de:	81bb      	strh	r3, [r7, #12]
 80007e0:	e03c      	b.n	800085c <renderBitmap+0xc4>
			tft_setAddrWindow(x+moveX,y+moveY,x+moveX+1,y+moveY+1);
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4413      	add	r3, r2
 80007ec:	b2d8      	uxtb	r0, r3
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b2d9      	uxtb	r1, r3
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3301      	adds	r3, #1
 8000808:	b2dc      	uxtb	r4, r3
 800080a:	88bb      	ldrh	r3, [r7, #4]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4622      	mov	r2, r4
 800081c:	f7ff fd6a 	bl	80002f4 <tft_setAddrWindow>
			HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <renderBitmap+0xe4>)
 8000828:	f002 f815 	bl	8002856 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t[]){(*bitmap) >> 8, *bitmap}, 2, 1000);
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	b29b      	uxth	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	723b      	strb	r3, [r7, #8]
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	727b      	strb	r3, [r7, #9]
 8000840:	f107 0108 	add.w	r1, r7, #8
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	2202      	movs	r2, #2
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <renderBitmap+0xe8>)
 800084c:	f002 fcb0 	bl	80031b0 <HAL_SPI_Transmit>
			*bitmap++;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	3302      	adds	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
		for (uint16_t moveX = 0; moveX < w; moveX++){
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	81bb      	strh	r3, [r7, #12]
 800085c:	89ba      	ldrh	r2, [r7, #12]
 800085e:	887b      	ldrh	r3, [r7, #2]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3be      	bcc.n	80007e2 <renderBitmap+0x4a>
	for (uint16_t moveY = 0; moveY < h; moveY++){
 8000864:	89fb      	ldrh	r3, [r7, #14]
 8000866:	3301      	adds	r3, #1
 8000868:	81fb      	strh	r3, [r7, #14]
 800086a:	89fa      	ldrh	r2, [r7, #14]
 800086c:	883b      	ldrh	r3, [r7, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d3b4      	bcc.n	80007dc <renderBitmap+0x44>
 8000872:	e000      	b.n	8000876 <renderBitmap+0xde>
		return;
 8000874:	bf00      	nop
		}
	}
}
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40010c00 	.word	0x40010c00
 8000880:	20001830 	.word	0x20001830

08000884 <getAddress>:
};




uint8_t *getAddress(uint8_t item) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

    if (item == 0) {
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <getAddress+0x14>
        return (void*)level0;
 8000894:	4b33      	ldr	r3, [pc, #204]	; (8000964 <getAddress+0xe0>)
 8000896:	e05f      	b.n	8000958 <getAddress+0xd4>
    }
    if (item == 1) {
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <getAddress+0x1e>
        return (void*)level1;
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <getAddress+0xe4>)
 80008a0:	e05a      	b.n	8000958 <getAddress+0xd4>
    }
    if (item == 2) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d101      	bne.n	80008ac <getAddress+0x28>
		return (void*)level2;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <getAddress+0xe8>)
 80008aa:	e055      	b.n	8000958 <getAddress+0xd4>
	}
    if (item == 3) {
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d101      	bne.n	80008b6 <getAddress+0x32>
		return (void*)level3;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <getAddress+0xec>)
 80008b4:	e050      	b.n	8000958 <getAddress+0xd4>
	}
    if (item == 4) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d101      	bne.n	80008c0 <getAddress+0x3c>
		return (void*)level4;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <getAddress+0xf0>)
 80008be:	e04b      	b.n	8000958 <getAddress+0xd4>
	}
    if (item == 5) {
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b05      	cmp	r3, #5
 80008c4:	d101      	bne.n	80008ca <getAddress+0x46>
		return (void*)level5;
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <getAddress+0xf4>)
 80008c8:	e046      	b.n	8000958 <getAddress+0xd4>
	}
    if (item == 6) {
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d101      	bne.n	80008d4 <getAddress+0x50>
		return (void*)level6;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <getAddress+0xf8>)
 80008d2:	e041      	b.n	8000958 <getAddress+0xd4>
	}
    if (item == 7) {
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	d101      	bne.n	80008de <getAddress+0x5a>
		return (void*)level7;
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <getAddress+0xfc>)
 80008dc:	e03c      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 8) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	d101      	bne.n	80008e8 <getAddress+0x64>
		return (void*)level8;
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <getAddress+0x100>)
 80008e6:	e037      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 9) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	d101      	bne.n	80008f2 <getAddress+0x6e>
		return (void*)level9;
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <getAddress+0x104>)
 80008f0:	e032      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 10) {
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b0a      	cmp	r3, #10
 80008f6:	d101      	bne.n	80008fc <getAddress+0x78>
		return (void*)level10;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <getAddress+0x108>)
 80008fa:	e02d      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 11) {
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b0b      	cmp	r3, #11
 8000900:	d101      	bne.n	8000906 <getAddress+0x82>
		return (void*)level11;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <getAddress+0x10c>)
 8000904:	e028      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 12) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b0c      	cmp	r3, #12
 800090a:	d101      	bne.n	8000910 <getAddress+0x8c>
		return (void*)level12;
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <getAddress+0x110>)
 800090e:	e023      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 13) {
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b0d      	cmp	r3, #13
 8000914:	d101      	bne.n	800091a <getAddress+0x96>
		return (void*)level13;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <getAddress+0x114>)
 8000918:	e01e      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 14) {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b0e      	cmp	r3, #14
 800091e:	d101      	bne.n	8000924 <getAddress+0xa0>
		return (void*)level14;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <getAddress+0x118>)
 8000922:	e019      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 15) {
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d101      	bne.n	800092e <getAddress+0xaa>
		return (void*)level15;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <getAddress+0x11c>)
 800092c:	e014      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 16) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b10      	cmp	r3, #16
 8000932:	d101      	bne.n	8000938 <getAddress+0xb4>
		return (void*)level16;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <getAddress+0x120>)
 8000936:	e00f      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 17) {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b11      	cmp	r3, #17
 800093c:	d101      	bne.n	8000942 <getAddress+0xbe>
		return (void*)level17;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <getAddress+0x124>)
 8000940:	e00a      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 18) {
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b12      	cmp	r3, #18
 8000946:	d101      	bne.n	800094c <getAddress+0xc8>
		return (void*)level18;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <getAddress+0x128>)
 800094a:	e005      	b.n	8000958 <getAddress+0xd4>
	}
	if (item == 19) {
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b13      	cmp	r3, #19
 8000950:	d101      	bne.n	8000956 <getAddress+0xd2>
		return (void*)level19;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <getAddress+0x12c>)
 8000954:	e000      	b.n	8000958 <getAddress+0xd4>
	}
    return NULL;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20001780 	.word	0x20001780
 8000968:	20001754 	.word	0x20001754
 800096c:	2000171c 	.word	0x2000171c
 8000970:	200016ec 	.word	0x200016ec
 8000974:	200016b4 	.word	0x200016b4
 8000978:	2000166c 	.word	0x2000166c
 800097c:	20001634 	.word	0x20001634
 8000980:	200015d4 	.word	0x200015d4
 8000984:	200015a8 	.word	0x200015a8
 8000988:	20001550 	.word	0x20001550
 800098c:	200014fc 	.word	0x200014fc
 8000990:	200014b4 	.word	0x200014b4
 8000994:	20001474 	.word	0x20001474
 8000998:	20001448 	.word	0x20001448
 800099c:	20001408 	.word	0x20001408
 80009a0:	200013b8 	.word	0x200013b8
 80009a4:	2000138c 	.word	0x2000138c
 80009a8:	2000134c 	.word	0x2000134c
 80009ac:	2000130c 	.word	0x2000130c
 80009b0:	200012c4 	.word	0x200012c4

080009b4 <generateLevel>:



void generateLevel(uint8_t w, uint8_t h, uint8_t arr[h][w]){
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	4603      	mov	r3, r0
 80009bc:	603a      	str	r2, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	460b      	mov	r3, r1
 80009c2:	71bb      	strb	r3, [r7, #6]
 80009c4:	79fe      	ldrb	r6, [r7, #7]
 80009c6:	4633      	mov	r3, r6
 80009c8:	3b01      	subs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	b2f3      	uxtb	r3, r6
 80009ce:	2200      	movs	r2, #0
 80009d0:	461c      	mov	r4, r3
 80009d2:	4615      	mov	r5, r2
 80009d4:	f04f 0200 	mov.w	r2, #0
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	00eb      	lsls	r3, r5, #3
 80009de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009e2:	00e2      	lsls	r2, r4, #3

	currentLevelWidth  	 = w;
 80009e4:	4a5f      	ldr	r2, [pc, #380]	; (8000b64 <generateLevel+0x1b0>)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	7013      	strb	r3, [r2, #0]
	currentLevelHeight 	 = h;
 80009ea:	4a5f      	ldr	r2, [pc, #380]	; (8000b68 <generateLevel+0x1b4>)
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	7013      	strb	r3, [r2, #0]
    gameBoxAmount 		 = 0;
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <generateLevel+0x1b8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
    currentMovementCount = 0;
 80009f6:	4b5e      	ldr	r3, [pc, #376]	; (8000b70 <generateLevel+0x1bc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	801a      	strh	r2, [r3, #0]

    offsetMap[0] = (240 - 20*w) / 2; // offsetX
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f06f 0213 	mvn.w	r2, #19
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	33f0      	adds	r3, #240	; 0xf0
 8000a08:	0fda      	lsrs	r2, r3, #31
 8000a0a:	4413      	add	r3, r2
 8000a0c:	105b      	asrs	r3, r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <generateLevel+0x1c0>)
 8000a12:	701a      	strb	r2, [r3, #0]
    offsetMap[1] = (240 - 20*h) / 2; // offsetY
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	f06f 0213 	mvn.w	r2, #19
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	33f0      	adds	r3, #240	; 0xf0
 8000a20:	0fda      	lsrs	r2, r3, #31
 8000a22:	4413      	add	r3, r2
 8000a24:	105b      	asrs	r3, r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b52      	ldr	r3, [pc, #328]	; (8000b74 <generateLevel+0x1c0>)
 8000a2a:	705a      	strb	r2, [r3, #1]

    for (int y = 0; y < h; y++){
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e08d      	b.n	8000b4e <generateLevel+0x19a>
        for (int x = 0; x < w; x++){
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	e082      	b.n	8000b3e <generateLevel+0x18a>
            uint8_t value = arr[y][x];
 8000a38:	4632      	mov	r2, r6
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fb02 f303 	mul.w	r3, r2, r3
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	441a      	add	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4413      	add	r3, r2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	72fb      	strb	r3, [r7, #11]

            if ( arr[y][x] == 6 ){
 8000a4c:	4632      	mov	r2, r6
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	441a      	add	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d107      	bne.n	8000a72 <generateLevel+0xbe>
                playerX = x;
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <generateLevel+0x1c4>)
 8000a68:	701a      	strb	r2, [r3, #0]
                playerY = y;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <generateLevel+0x1c8>)
 8000a70:	701a      	strb	r2, [r3, #0]
            }

            if ( gameBoxAmount < 5 && (value == 4 || value == 5) ){
 8000a72:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <generateLevel+0x1b8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d836      	bhi.n	8000ae8 <generateLevel+0x134>
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d002      	beq.n	8000a86 <generateLevel+0xd2>
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	d130      	bne.n	8000ae8 <generateLevel+0x134>
                boxList[gameBoxAmount].active = value == 5;
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <generateLevel+0x1b8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4610      	mov	r0, r2
 8000a9a:	4a39      	ldr	r2, [pc, #228]	; (8000b80 <generateLevel+0x1cc>)
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	440b      	add	r3, r1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	701a      	strb	r2, [r3, #0]
                boxList[gameBoxAmount].x = x;
 8000aaa:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <generateLevel+0x1b8>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	b2d8      	uxtb	r0, r3
 8000ab4:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <generateLevel+0x1cc>)
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	4413      	add	r3, r2
 8000abe:	4602      	mov	r2, r0
 8000ac0:	701a      	strb	r2, [r3, #0]
                boxList[gameBoxAmount].y = y;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <generateLevel+0x1b8>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	b2d8      	uxtb	r0, r3
 8000acc:	4a2c      	ldr	r2, [pc, #176]	; (8000b80 <generateLevel+0x1cc>)
 8000ace:	460b      	mov	r3, r1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	440b      	add	r3, r1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4602      	mov	r2, r0
 8000ada:	701a      	strb	r2, [r3, #0]
                gameBoxAmount++;
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <generateLevel+0x1b8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <generateLevel+0x1b8>)
 8000ae6:	701a      	strb	r2, [r3, #0]
            }

            if ( value != 0 ){
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d024      	beq.n	8000b38 <generateLevel+0x184>
            	renderBitmap(20*x+offsetMap[0], 20*y+offsetMap[1], 20, 20, spriteList[value-1]);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <generateLevel+0x1c0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b298      	uxth	r0, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <generateLevel+0x1c0>)
 8000b16:	785b      	ldrb	r3, [r3, #1]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b299      	uxth	r1, r3
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <generateLevel+0x1d0>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2314      	movs	r3, #20
 8000b32:	2214      	movs	r2, #20
 8000b34:	f7ff fe30 	bl	8000798 <renderBitmap>
        for (int x = 0; x < w; x++){
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	f6ff af78 	blt.w	8000a38 <generateLevel+0x84>
    for (int y = 0; y < h; y++){
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f6ff af6d 	blt.w	8000a32 <generateLevel+0x7e>

        }

    }

}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200018e5 	.word	0x200018e5
 8000b68:	200018e6 	.word	0x200018e6
 8000b6c:	200018e3 	.word	0x200018e3
 8000b70:	200018ea 	.word	0x200018ea
 8000b74:	200018e8 	.word	0x200018e8
 8000b78:	200018ec 	.word	0x200018ec
 8000b7c:	200018ed 	.word	0x200018ed
 8000b80:	200018d4 	.word	0x200018d4
 8000b84:	20000000 	.word	0x20000000

08000b88 <generateLevelByIndex>:



void generateLevelByIndex(uint8_t levelIndex){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]

	if ( levelIndex == 0 ){
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <generateLevelByIndex+0x1c>
		generateLevel(6, 7, level0);
 8000b98:	4a59      	ldr	r2, [pc, #356]	; (8000d00 <generateLevelByIndex+0x178>)
 8000b9a:	2107      	movs	r1, #7
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f7ff ff09 	bl	80009b4 <generateLevel>
		return;
 8000ba2:	e0aa      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 1 ){
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d105      	bne.n	8000bb6 <generateLevelByIndex+0x2e>
		generateLevel(6, 7, level1);
 8000baa:	4a56      	ldr	r2, [pc, #344]	; (8000d04 <generateLevelByIndex+0x17c>)
 8000bac:	2107      	movs	r1, #7
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff ff00 	bl	80009b4 <generateLevel>
		return;
 8000bb4:	e0a1      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 2 ){
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d105      	bne.n	8000bc8 <generateLevelByIndex+0x40>
		generateLevel(9, 6, level2);
 8000bbc:	4a52      	ldr	r2, [pc, #328]	; (8000d08 <generateLevelByIndex+0x180>)
 8000bbe:	2106      	movs	r1, #6
 8000bc0:	2009      	movs	r0, #9
 8000bc2:	f7ff fef7 	bl	80009b4 <generateLevel>
		return;
 8000bc6:	e098      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 3 ){
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d105      	bne.n	8000bda <generateLevelByIndex+0x52>
		generateLevel(8, 6, level3);
 8000bce:	4a4f      	ldr	r2, [pc, #316]	; (8000d0c <generateLevelByIndex+0x184>)
 8000bd0:	2106      	movs	r1, #6
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	f7ff feee 	bl	80009b4 <generateLevel>
		return;
 8000bd8:	e08f      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 4 ){
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d105      	bne.n	8000bec <generateLevelByIndex+0x64>
		generateLevel(8, 7, level4);
 8000be0:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <generateLevelByIndex+0x188>)
 8000be2:	2107      	movs	r1, #7
 8000be4:	2008      	movs	r0, #8
 8000be6:	f7ff fee5 	bl	80009b4 <generateLevel>
		return;
 8000bea:	e086      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 5 ){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b05      	cmp	r3, #5
 8000bf0:	d105      	bne.n	8000bfe <generateLevelByIndex+0x76>
		generateLevel(12, 6, level5);
 8000bf2:	4a48      	ldr	r2, [pc, #288]	; (8000d14 <generateLevelByIndex+0x18c>)
 8000bf4:	2106      	movs	r1, #6
 8000bf6:	200c      	movs	r0, #12
 8000bf8:	f7ff fedc 	bl	80009b4 <generateLevel>
		return;
 8000bfc:	e07d      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 6 ){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d105      	bne.n	8000c10 <generateLevelByIndex+0x88>
		generateLevel(7, 8, level6);
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <generateLevelByIndex+0x190>)
 8000c06:	2108      	movs	r1, #8
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f7ff fed3 	bl	80009b4 <generateLevel>
		return;
 8000c0e:	e074      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 7 ){
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d105      	bne.n	8000c22 <generateLevelByIndex+0x9a>
		generateLevel(8, 12, level7);
 8000c16:	4a41      	ldr	r2, [pc, #260]	; (8000d1c <generateLevelByIndex+0x194>)
 8000c18:	210c      	movs	r1, #12
 8000c1a:	2008      	movs	r0, #8
 8000c1c:	f7ff feca 	bl	80009b4 <generateLevel>
		return;
 8000c20:	e06b      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 8 ){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d105      	bne.n	8000c34 <generateLevelByIndex+0xac>
		generateLevel(6, 7, level8);
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <generateLevelByIndex+0x198>)
 8000c2a:	2107      	movs	r1, #7
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	f7ff fec1 	bl	80009b4 <generateLevel>
		return;
 8000c32:	e062      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 9 ){
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b09      	cmp	r3, #9
 8000c38:	d105      	bne.n	8000c46 <generateLevelByIndex+0xbe>
		generateLevel(11, 8, level9);
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <generateLevelByIndex+0x19c>)
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f7ff feb8 	bl	80009b4 <generateLevel>
		return;
 8000c44:	e059      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 10 ){
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b0a      	cmp	r3, #10
 8000c4a:	d105      	bne.n	8000c58 <generateLevelByIndex+0xd0>
		generateLevel(9, 9, level10);
 8000c4c:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <generateLevelByIndex+0x1a0>)
 8000c4e:	2109      	movs	r1, #9
 8000c50:	2009      	movs	r0, #9
 8000c52:	f7ff feaf 	bl	80009b4 <generateLevel>
		return;
 8000c56:	e050      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 11 ){
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b0b      	cmp	r3, #11
 8000c5c:	d105      	bne.n	8000c6a <generateLevelByIndex+0xe2>
		generateLevel(9, 8, level11);
 8000c5e:	4a33      	ldr	r2, [pc, #204]	; (8000d2c <generateLevelByIndex+0x1a4>)
 8000c60:	2108      	movs	r1, #8
 8000c62:	2009      	movs	r0, #9
 8000c64:	f7ff fea6 	bl	80009b4 <generateLevel>
		return;
 8000c68:	e047      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 12 ){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b0c      	cmp	r3, #12
 8000c6e:	d105      	bne.n	8000c7c <generateLevelByIndex+0xf4>
		generateLevel(7, 9, level12);
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <generateLevelByIndex+0x1a8>)
 8000c72:	2109      	movs	r1, #9
 8000c74:	2007      	movs	r0, #7
 8000c76:	f7ff fe9d 	bl	80009b4 <generateLevel>
		return;
 8000c7a:	e03e      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 13 ){
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b0d      	cmp	r3, #13
 8000c80:	d105      	bne.n	8000c8e <generateLevelByIndex+0x106>
		generateLevel(7, 6, level13);
 8000c82:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <generateLevelByIndex+0x1ac>)
 8000c84:	2106      	movs	r1, #6
 8000c86:	2007      	movs	r0, #7
 8000c88:	f7ff fe94 	bl	80009b4 <generateLevel>
		return;
 8000c8c:	e035      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 14 ){
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b0e      	cmp	r3, #14
 8000c92:	d105      	bne.n	8000ca0 <generateLevelByIndex+0x118>
		generateLevel(9, 7, level14);
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <generateLevelByIndex+0x1b0>)
 8000c96:	2107      	movs	r1, #7
 8000c98:	2009      	movs	r0, #9
 8000c9a:	f7ff fe8b 	bl	80009b4 <generateLevel>
		return;
 8000c9e:	e02c      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 15 ){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d105      	bne.n	8000cb2 <generateLevelByIndex+0x12a>
		generateLevel(10, 8, level15);
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <generateLevelByIndex+0x1b4>)
 8000ca8:	2108      	movs	r1, #8
 8000caa:	200a      	movs	r0, #10
 8000cac:	f7ff fe82 	bl	80009b4 <generateLevel>
		return;
 8000cb0:	e023      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 16 ){
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	d105      	bne.n	8000cc4 <generateLevelByIndex+0x13c>
		generateLevel(6, 7, level16);
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <generateLevelByIndex+0x1b8>)
 8000cba:	2107      	movs	r1, #7
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f7ff fe79 	bl	80009b4 <generateLevel>
		return;
 8000cc2:	e01a      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 17 ){
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b11      	cmp	r3, #17
 8000cc8:	d105      	bne.n	8000cd6 <generateLevelByIndex+0x14e>
		generateLevel(7, 9, level17);
 8000cca:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <generateLevelByIndex+0x1bc>)
 8000ccc:	2109      	movs	r1, #9
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f7ff fe70 	bl	80009b4 <generateLevel>
		return;
 8000cd4:	e011      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 18 ){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b12      	cmp	r3, #18
 8000cda:	d105      	bne.n	8000ce8 <generateLevelByIndex+0x160>
		generateLevel(8, 8, level18);
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <generateLevelByIndex+0x1c0>)
 8000cde:	2108      	movs	r1, #8
 8000ce0:	2008      	movs	r0, #8
 8000ce2:	f7ff fe67 	bl	80009b4 <generateLevel>
		return;
 8000ce6:	e008      	b.n	8000cfa <generateLevelByIndex+0x172>
	}
	if ( levelIndex == 19 ){
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b13      	cmp	r3, #19
 8000cec:	d105      	bne.n	8000cfa <generateLevelByIndex+0x172>
		generateLevel(9, 8, level19);
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <generateLevelByIndex+0x1c4>)
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	2009      	movs	r0, #9
 8000cf4:	f7ff fe5e 	bl	80009b4 <generateLevel>
		return;
 8000cf8:	bf00      	nop
	}


}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20001780 	.word	0x20001780
 8000d04:	20001754 	.word	0x20001754
 8000d08:	2000171c 	.word	0x2000171c
 8000d0c:	200016ec 	.word	0x200016ec
 8000d10:	200016b4 	.word	0x200016b4
 8000d14:	2000166c 	.word	0x2000166c
 8000d18:	20001634 	.word	0x20001634
 8000d1c:	200015d4 	.word	0x200015d4
 8000d20:	200015a8 	.word	0x200015a8
 8000d24:	20001550 	.word	0x20001550
 8000d28:	200014fc 	.word	0x200014fc
 8000d2c:	200014b4 	.word	0x200014b4
 8000d30:	20001474 	.word	0x20001474
 8000d34:	20001448 	.word	0x20001448
 8000d38:	20001408 	.word	0x20001408
 8000d3c:	200013b8 	.word	0x200013b8
 8000d40:	2000138c 	.word	0x2000138c
 8000d44:	2000134c 	.word	0x2000134c
 8000d48:	2000130c 	.word	0x2000130c
 8000d4c:	200012c4 	.word	0x200012c4

08000d50 <hasBoxAt>:





int8_t hasBoxAt(uint8_t x, uint8_t y){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e01a      	b.n	8000d9c <hasBoxAt+0x4c>
		if ( boxList[boxIndex].x == x && boxList[boxIndex].y == y ){
 8000d66:	7bfa      	ldrb	r2, [r7, #15]
 8000d68:	4912      	ldr	r1, [pc, #72]	; (8000db4 <hasBoxAt+0x64>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d10d      	bne.n	8000d96 <hasBoxAt+0x46>
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	490d      	ldr	r1, [pc, #52]	; (8000db4 <hasBoxAt+0x64>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	3301      	adds	r3, #1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d102      	bne.n	8000d96 <hasBoxAt+0x46>
			return boxIndex;
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	e009      	b.n	8000daa <hasBoxAt+0x5a>
	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <hasBoxAt+0x68>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	7bfa      	ldrb	r2, [r7, #15]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3df      	bcc.n	8000d66 <hasBoxAt+0x16>
		}
	}
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200018d4 	.word	0x200018d4
 8000db8:	200018e3 	.word	0x200018e3

08000dbc <updateBox>:



void updateBox(uint8_t levelIndex){
 8000dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc0:	b097      	sub	sp, #92	; 0x5c
 8000dc2:	af02      	add	r7, sp, #8
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000dd0:	e111      	b.n	8000ff6 <updateBox+0x23a>
		uint8_t (*mapa)[currentLevelHeight][currentLevelWidth] = (uint8_t (*)[currentLevelHeight][currentLevelWidth]) getAddress(currentLevelIndex);
 8000dd2:	4b8f      	ldr	r3, [pc, #572]	; (8001010 <updateBox+0x254>)
 8000dd4:	7818      	ldrb	r0, [r3, #0]
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ddc:	b2c3      	uxtb	r3, r0
 8000dde:	2200      	movs	r2, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	61fa      	str	r2, [r7, #28]
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000df0:	4629      	mov	r1, r5
 8000df2:	00cb      	lsls	r3, r1, #3
 8000df4:	4621      	mov	r1, r4
 8000df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	00ca      	lsls	r2, r1, #3
 8000dfe:	4606      	mov	r6, r0
 8000e00:	4b84      	ldr	r3, [pc, #528]	; (8001014 <updateBox+0x258>)
 8000e02:	7819      	ldrb	r1, [r3, #0]
 8000e04:	460b      	mov	r3, r1
 8000e06:	3b01      	subs	r3, #1
 8000e08:	647b      	str	r3, [r7, #68]	; 0x44
 8000e0a:	b2c3      	uxtb	r3, r0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	617a      	str	r2, [r7, #20]
 8000e12:	b2cb      	uxtb	r3, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	60fa      	str	r2, [r7, #12]
 8000e1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000e24:	4622      	mov	r2, r4
 8000e26:	fb02 f203 	mul.w	r2, r2, r3
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	fb0c f303 	mul.w	r3, ip, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	4602      	mov	r2, r0
 8000e36:	4621      	mov	r1, r4
 8000e38:	fba2 8901 	umull	r8, r9, r2, r1
 8000e3c:	444b      	add	r3, r9
 8000e3e:	4699      	mov	r9, r3
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <updateBox+0x254>)
 8000e56:	7819      	ldrb	r1, [r3, #0]
 8000e58:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <updateBox+0x258>)
 8000e5a:	7818      	ldrb	r0, [r3, #0]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
 8000e62:	b2cb      	uxtb	r3, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	627a      	str	r2, [r7, #36]	; 0x24
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000e74:	00e3      	lsls	r3, r4, #3
 8000e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e7a:	46a4      	mov	ip, r4
 8000e7c:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8000e80:	00e2      	lsls	r2, r4, #3
 8000e82:	4603      	mov	r3, r0
 8000e84:	3b01      	subs	r3, #1
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e88:	b2cb      	uxtb	r3, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	b2c3      	uxtb	r3, r0
 8000e92:	2200      	movs	r2, #0
 8000e94:	469a      	mov	sl, r3
 8000e96:	4693      	mov	fp, r2
 8000e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	fb0a f203 	mul.w	r2, sl, r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	fb03 f30b 	mul.w	r3, r3, fp
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4602      	mov	r2, r0
 8000eac:	fba2 210a 	umull	r2, r1, r2, sl
 8000eb0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000eb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8000eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb6:	4413      	add	r3, r2
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	00cb      	lsls	r3, r1, #3
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	4604      	mov	r4, r0
 8000ed0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	00ca      	lsls	r2, r1, #3
 8000ed8:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <updateBox+0x25c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fcd1 	bl	8000884 <getAddress>
 8000ee2:	63b8      	str	r0, [r7, #56]	; 0x38
		boxList[boxIndex].active = ((*mapa)[boxList[boxIndex].y][boxList[boxIndex].x] == 3 || (*mapa)[boxList[boxIndex].y][boxList[boxIndex].x] == 5);
 8000ee4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ee8:	494c      	ldr	r1, [pc, #304]	; (800101c <updateBox+0x260>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000efc:	4947      	ldr	r1, [pc, #284]	; (800101c <updateBox+0x260>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0c:	fb06 f200 	mul.w	r2, r6, r0
 8000f10:	440b      	add	r3, r1
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d01a      	beq.n	8000f50 <updateBox+0x194>
 8000f1a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f1e:	493f      	ldr	r1, [pc, #252]	; (800101c <updateBox+0x260>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	3301      	adds	r3, #1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f32:	493a      	ldr	r1, [pc, #232]	; (800101c <updateBox+0x260>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f42:	fb06 f200 	mul.w	r2, r6, r0
 8000f46:	440b      	add	r3, r1
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d101      	bne.n	8000f54 <updateBox+0x198>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <updateBox+0x19a>
 8000f54:	2300      	movs	r3, #0
 8000f56:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	492f      	ldr	r1, [pc, #188]	; (800101c <updateBox+0x260>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	1c9a      	adds	r2, r3, #2
 8000f68:	4603      	mov	r3, r0
 8000f6a:	7013      	strb	r3, [r2, #0]
		renderBitmap(20*boxList[boxIndex].x+offsetMap[0], 20*boxList[boxIndex].y+offsetMap[1], 20, 20, spriteList[3 + boxList[boxIndex].active]);
 8000f6c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f70:	492a      	ldr	r1, [pc, #168]	; (800101c <updateBox+0x260>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <updateBox+0x264>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b29e      	uxth	r6, r3
 8000f94:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f98:	4920      	ldr	r1, [pc, #128]	; (800101c <updateBox+0x260>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <updateBox+0x264>)
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000fc2:	4916      	ldr	r1, [pc, #88]	; (800101c <updateBox+0x260>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	3302      	adds	r3, #2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	1cda      	adds	r2, r3, #3
 8000fd2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fd6:	fb03 f202 	mul.w	r2, r3, r2
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <updateBox+0x268>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2314      	movs	r3, #20
 8000fe2:	2214      	movs	r2, #20
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f7ff fbd6 	bl	8000798 <renderBitmap>
	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8000fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <updateBox+0x26c>)
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ffe:	4293      	cmp	r3, r2
 8001000:	f4ff aee7 	bcc.w	8000dd2 <updateBox+0x16>
	}
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3754      	adds	r7, #84	; 0x54
 800100a:	46bd      	mov	sp, r7
 800100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001010:	200018e5 	.word	0x200018e5
 8001014:	200018e6 	.word	0x200018e6
 8001018:	200018e4 	.word	0x200018e4
 800101c:	200018d4 	.word	0x200018d4
 8001020:	200018e8 	.word	0x200018e8
 8001024:	20000000 	.word	0x20000000
 8001028:	200018e3 	.word	0x200018e3

0800102c <gameWin>:




uint8_t gameWin(){
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	b091      	sub	sp, #68	; 0x44
 8001032:	af00      	add	r7, sp, #0

	uint8_t (*mapa)[currentLevelHeight][currentLevelWidth] = (uint8_t (*)[currentLevelHeight][currentLevelWidth]) getAddress(currentLevelIndex);
 8001034:	4b60      	ldr	r3, [pc, #384]	; (80011b8 <gameWin+0x18c>)
 8001036:	f893 c000 	ldrb.w	ip, [r3]
 800103a:	4663      	mov	r3, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001040:	fa5f f38c 	uxtb.w	r3, ip
 8001044:	2200      	movs	r2, #0
 8001046:	4618      	mov	r0, r3
 8001048:	4611      	mov	r1, r2
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00cb      	lsls	r3, r1, #3
 8001054:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001058:	00c2      	lsls	r2, r0, #3
 800105a:	4666      	mov	r6, ip
 800105c:	4b57      	ldr	r3, [pc, #348]	; (80011bc <gameWin+0x190>)
 800105e:	7819      	ldrb	r1, [r3, #0]
 8001060:	460b      	mov	r3, r1
 8001062:	3b01      	subs	r3, #1
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
 8001066:	fa5f f38c 	uxtb.w	r3, ip
 800106a:	2200      	movs	r2, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	617a      	str	r2, [r7, #20]
 8001070:	b2cb      	uxtb	r3, r1
 8001072:	2200      	movs	r2, #0
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	61fa      	str	r2, [r7, #28]
 8001078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107c:	460b      	mov	r3, r1
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	fb02 f203 	mul.w	r2, r2, r3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	4684      	mov	ip, r0
 8001088:	fb0c f303 	mul.w	r3, ip, r3
 800108c:	4413      	add	r3, r2
 800108e:	4602      	mov	r2, r0
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	fba2 8901 	umull	r8, r9, r2, r1
 8001096:	444b      	add	r3, r9
 8001098:	4699      	mov	r9, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <gameWin+0x18c>)
 80010b0:	7819      	ldrb	r1, [r3, #0]
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <gameWin+0x190>)
 80010b4:	f893 c000 	ldrb.w	ip, [r3]
 80010b8:	460b      	mov	r3, r1
 80010ba:	3b01      	subs	r3, #1
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
 80010be:	b2cb      	uxtb	r3, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	60fa      	str	r2, [r7, #12]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80010d2:	4648      	mov	r0, r9
 80010d4:	00c3      	lsls	r3, r0, #3
 80010d6:	4640      	mov	r0, r8
 80010d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010dc:	4640      	mov	r0, r8
 80010de:	00c2      	lsls	r2, r0, #3
 80010e0:	4663      	mov	r3, ip
 80010e2:	3b01      	subs	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e6:	b2cb      	uxtb	r3, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	fa5f f38c 	uxtb.w	r3, ip
 80010f2:	2200      	movs	r2, #0
 80010f4:	469a      	mov	sl, r3
 80010f6:	4693      	mov	fp, r2
 80010f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010fc:	460b      	mov	r3, r1
 80010fe:	fb0a f203 	mul.w	r2, sl, r3
 8001102:	4603      	mov	r3, r0
 8001104:	fb03 f30b 	mul.w	r3, r3, fp
 8001108:	4413      	add	r3, r2
 800110a:	4602      	mov	r2, r0
 800110c:	fba2 450a 	umull	r4, r5, r2, sl
 8001110:	442b      	add	r3, r5
 8001112:	461d      	mov	r5, r3
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	00eb      	lsls	r3, r5, #3
 800111e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001122:	00e2      	lsls	r2, r4, #3
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <gameWin+0x194>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fbab 	bl	8000884 <getAddress>
 800112e:	62b8      	str	r0, [r7, #40]	; 0x28

	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8001130:	2300      	movs	r3, #0
 8001132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001136:	e033      	b.n	80011a0 <gameWin+0x174>
		uint8_t box_x = boxList[boxIndex].x;
 8001138:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800113c:	4921      	ldr	r1, [pc, #132]	; (80011c4 <gameWin+0x198>)
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	440b      	add	r3, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t box_y = boxList[boxIndex].y;
 800114c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001150:	491c      	ldr	r1, [pc, #112]	; (80011c4 <gameWin+0x198>)
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	440b      	add	r3, r1
 800115a:	3301      	adds	r3, #1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if ( (*mapa)[box_y][box_x] != 3 && (*mapa)[box_y][box_x] != 5 ){
 8001162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800116a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116c:	fb06 f303 	mul.w	r3, r6, r3
 8001170:	440a      	add	r2, r1
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d00d      	beq.n	8001196 <gameWin+0x16a>
 800117a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800117e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001184:	fb06 f303 	mul.w	r3, r6, r3
 8001188:	440a      	add	r2, r1
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d001      	beq.n	8001196 <gameWin+0x16a>
			return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e00b      	b.n	80011ae <gameWin+0x182>
	for (uint8_t boxIndex = 0; boxIndex < gameBoxAmount; boxIndex++){
 8001196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800119a:	3301      	adds	r3, #1
 800119c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <gameWin+0x19c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3c5      	bcc.n	8001138 <gameWin+0x10c>
		}
	}

	return 1;
 80011ac:	2301      	movs	r3, #1

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3744      	adds	r7, #68	; 0x44
 80011b2:	46bd      	mov	sp, r7
 80011b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b8:	200018e5 	.word	0x200018e5
 80011bc:	200018e6 	.word	0x200018e6
 80011c0:	200018e4 	.word	0x200018e4
 80011c4:	200018d4 	.word	0x200018d4
 80011c8:	200018e3 	.word	0x200018e3

080011cc <showSummary>:





void showSummary(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
	char text[10];
	sprintf(text, "Moves: %i", currentMovementCount);
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <showSummary+0x44>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <showSummary+0x48>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fcbf 	bl	8003b60 <siprintf>
	tft_fillRect(0, 0, 240, 240, 0x0000);
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	23f0      	movs	r3, #240	; 0xf0
 80011e8:	22f0      	movs	r2, #240	; 0xf0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff f90b 	bl	8000408 <tft_fillRect>
	tft_drawText(30, 108, text, 0xFFFF, 0x0000, 3);
 80011f2:	1d3a      	adds	r2, r7, #4
 80011f4:	2303      	movs	r3, #3
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001200:	216c      	movs	r1, #108	; 0x6c
 8001202:	201e      	movs	r0, #30
 8001204:	f7ff fa5c 	bl	80006c0 <tft_drawText>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200018ea 	.word	0x200018ea
 8001214:	08004978 	.word	0x08004978

08001218 <showCurrentLevel>:


void showCurrentLevel(){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
	char text[9];
	sprintf(text, "Level: %i", currentLevelIndex+1);
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <showCurrentLevel+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <showCurrentLevel+0x48>)
 8001228:	4618      	mov	r0, r3
 800122a:	f002 fc99 	bl	8003b60 <siprintf>
	tft_fillRect(0, 0, 240, 240, 0x0000);
 800122e:	2300      	movs	r3, #0
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	23f0      	movs	r3, #240	; 0xf0
 8001234:	22f0      	movs	r2, #240	; 0xf0
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff f8e5 	bl	8000408 <tft_fillRect>
	tft_drawText(39, 108, text, 0xFFFF, 0x0000, 3);
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	2303      	movs	r3, #3
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124c:	216c      	movs	r1, #108	; 0x6c
 800124e:	2027      	movs	r0, #39	; 0x27
 8001250:	f7ff fa36 	bl	80006c0 <tft_drawText>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200018e4 	.word	0x200018e4
 8001260:	08004984 	.word	0x08004984

08001264 <showMenu>:



void showMenu(){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af02      	add	r7, sp, #8
	char text[6];
	sprintf(text, "< %2i >", currentLevelIndex+1);
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <showMenu+0x34>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	463b      	mov	r3, r7
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <showMenu+0x38>)
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fc73 	bl	8003b60 <siprintf>
	tft_drawText(30, 100, text, 0xFFFF, 0x0000, 5);
 800127a:	463a      	mov	r2, r7
 800127c:	2305      	movs	r3, #5
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001288:	2164      	movs	r1, #100	; 0x64
 800128a:	201e      	movs	r0, #30
 800128c:	f7ff fa18 	bl	80006c0 <tft_drawText>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200018e4 	.word	0x200018e4
 800129c:	08004990 	.word	0x08004990

080012a0 <updateLevel>:
// 1 -- UP
// 2 -- DOWN
// 3 -- LEFT
// 4 -- RIGHT

void updateLevel(uint8_t direction){
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	b095      	sub	sp, #84	; 0x54
 80012a6:	af02      	add	r7, sp, #8
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	updateBox(currentLevelIndex);
 80012ae:	4b8e      	ldr	r3, [pc, #568]	; (80014e8 <updateLevel+0x248>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd82 	bl	8000dbc <updateBox>

	uint8_t (*mapa)[currentLevelHeight][currentLevelWidth] = (uint8_t (*)[currentLevelHeight][currentLevelWidth]) getAddress(currentLevelIndex);
 80012b8:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <updateLevel+0x24c>)
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	4603      	mov	r3, r0
 80012be:	3b01      	subs	r3, #1
 80012c0:	647b      	str	r3, [r7, #68]	; 0x44
 80012c2:	b2c3      	uxtb	r3, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	461c      	mov	r4, r3
 80012c8:	4615      	mov	r5, r2
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	00eb      	lsls	r3, r5, #3
 80012d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012d8:	00e2      	lsls	r2, r4, #3
 80012da:	4604      	mov	r4, r0
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <updateLevel+0x250>)
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	3b01      	subs	r3, #1
 80012e4:	643b      	str	r3, [r7, #64]	; 0x40
 80012e6:	b2c3      	uxtb	r3, r0
 80012e8:	2200      	movs	r2, #0
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	627a      	str	r2, [r7, #36]	; 0x24
 80012ee:	b2cb      	uxtb	r3, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	61fa      	str	r2, [r7, #28]
 80012f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8001300:	462a      	mov	r2, r5
 8001302:	fb02 f203 	mul.w	r2, r2, r3
 8001306:	4633      	mov	r3, r6
 8001308:	4684      	mov	ip, r0
 800130a:	fb0c f303 	mul.w	r3, ip, r3
 800130e:	4413      	add	r3, r2
 8001310:	4602      	mov	r2, r0
 8001312:	4629      	mov	r1, r5
 8001314:	fba2 ab01 	umull	sl, fp, r2, r1
 8001318:	445b      	add	r3, fp
 800131a:	469b      	mov	fp, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800132c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001330:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <updateLevel+0x24c>)
 8001332:	7819      	ldrb	r1, [r3, #0]
 8001334:	4b6e      	ldr	r3, [pc, #440]	; (80014f0 <updateLevel+0x250>)
 8001336:	7818      	ldrb	r0, [r3, #0]
 8001338:	460b      	mov	r3, r1
 800133a:	3b01      	subs	r3, #1
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800133e:	b2cb      	uxtb	r3, r1
 8001340:	2200      	movs	r2, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	617a      	str	r2, [r7, #20]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001352:	465d      	mov	r5, fp
 8001354:	00eb      	lsls	r3, r5, #3
 8001356:	4655      	mov	r5, sl
 8001358:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800135c:	4655      	mov	r5, sl
 800135e:	00ea      	lsls	r2, r5, #3
 8001360:	4603      	mov	r3, r0
 8001362:	3b01      	subs	r3, #1
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
 8001366:	b2cb      	uxtb	r3, r1
 8001368:	2200      	movs	r2, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	60fa      	str	r2, [r7, #12]
 800136e:	b2c3      	uxtb	r3, r0
 8001370:	2200      	movs	r2, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137a:	460b      	mov	r3, r1
 800137c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001380:	4652      	mov	r2, sl
 8001382:	fb02 f203 	mul.w	r2, r2, r3
 8001386:	465b      	mov	r3, fp
 8001388:	4605      	mov	r5, r0
 800138a:	fb05 f303 	mul.w	r3, r5, r3
 800138e:	4413      	add	r3, r2
 8001390:	4602      	mov	r2, r0
 8001392:	4651      	mov	r1, sl
 8001394:	fba2 8901 	umull	r8, r9, r2, r1
 8001398:	444b      	add	r3, r9
 800139a:	4699      	mov	r9, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <updateLevel+0x248>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fa65 	bl	8000884 <getAddress>
 80013ba:	6378      	str	r0, [r7, #52]	; 0x34



	if ( (*mapa)[playerY][playerX] == 3 || (*mapa)[playerY][playerX] == 5 ){
 80013bc:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <updateLevel+0x254>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <updateLevel+0x258>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ca:	fb04 f300 	mul.w	r3, r4, r0
 80013ce:	440a      	add	r2, r1
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d00d      	beq.n	80013f4 <updateLevel+0x154>
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <updateLevel+0x254>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <updateLevel+0x258>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e6:	fb04 f300 	mul.w	r3, r4, r0
 80013ea:	440a      	add	r2, r1
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d120      	bne.n	8001436 <updateLevel+0x196>
		renderBitmap(20*playerX+offsetMap[0], 20*playerY+offsetMap[1], 20, 20, spriteList[2]);
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <updateLevel+0x258>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <updateLevel+0x25c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b298      	uxth	r0, r3
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <updateLevel+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <updateLevel+0x25c>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b299      	uxth	r1, r3
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <updateLevel+0x260>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2314      	movs	r3, #20
 800142e:	2214      	movs	r2, #20
 8001430:	f7ff f9b2 	bl	8000798 <renderBitmap>
 8001434:	e01f      	b.n	8001476 <updateLevel+0x1d6>
	}else{
		renderBitmap(20*playerX+offsetMap[0], 20*playerY+offsetMap[1], 20, 20, spriteList[1]);
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <updateLevel+0x258>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <updateLevel+0x25c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4413      	add	r3, r2
 800144e:	b298      	uxth	r0, r3
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <updateLevel+0x254>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <updateLevel+0x25c>)
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b299      	uxth	r1, r3
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <updateLevel+0x264>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2314      	movs	r3, #20
 8001470:	2214      	movs	r2, #20
 8001472:	f7ff f991 	bl	8000798 <renderBitmap>
	}



	// UP
	if ( direction == 1 ){
 8001476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 808e 	bne.w	800159c <updateLevel+0x2fc>

		int8_t boxIndex = hasBoxAt(playerX, playerY-1);
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <updateLevel+0x258>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <updateLevel+0x254>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f7ff fc5e 	bl	8000d50 <hasBoxAt>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

		if ( playerY > 0 ){
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <updateLevel+0x254>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 820a 	beq.w	80018b8 <updateLevel+0x618>
			if ( boxIndex == -1 ){
 80014a4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d12e      	bne.n	800150c <updateLevel+0x26c>
				if ( (*mapa)[playerY-1][playerX] > 1 ){
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <updateLevel+0x254>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <updateLevel+0x258>)
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	4611      	mov	r1, r2
 80014ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014bc:	fb04 f303 	mul.w	r3, r4, r3
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f240 81f6 	bls.w	80018b8 <updateLevel+0x618>
					playerY--;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <updateLevel+0x254>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <updateLevel+0x254>)
 80014d6:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <updateLevel+0x268>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <updateLevel+0x268>)
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e1e8      	b.n	80018b8 <updateLevel+0x618>
 80014e6:	bf00      	nop
 80014e8:	200018e4 	.word	0x200018e4
 80014ec:	200018e5 	.word	0x200018e5
 80014f0:	200018e6 	.word	0x200018e6
 80014f4:	200018ed 	.word	0x200018ed
 80014f8:	200018ec 	.word	0x200018ec
 80014fc:	200018e8 	.word	0x200018e8
 8001500:	20000640 	.word	0x20000640
 8001504:	20000320 	.word	0x20000320
 8001508:	200018ea 	.word	0x200018ea
				}
			}else if ( playerY >= 3 ){
 800150c:	4ba6      	ldr	r3, [pc, #664]	; (80017a8 <updateLevel+0x508>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b02      	cmp	r3, #2
 8001512:	f240 81d1 	bls.w	80018b8 <updateLevel+0x618>
				if ( boxIndex >= 0 && hasBoxAt(playerX, playerY-2) == -1 && (*mapa)[playerY-2][playerX] > 1 ){
 8001516:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	f2c0 81cc 	blt.w	80018b8 <updateLevel+0x618>
 8001520:	4ba2      	ldr	r3, [pc, #648]	; (80017ac <updateLevel+0x50c>)
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	4ba0      	ldr	r3, [pc, #640]	; (80017a8 <updateLevel+0x508>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3b02      	subs	r3, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fc0e 	bl	8000d50 <hasBoxAt>
 8001534:	4603      	mov	r3, r0
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	f040 81bd 	bne.w	80018b8 <updateLevel+0x618>
 800153e:	4b9a      	ldr	r3, [pc, #616]	; (80017a8 <updateLevel+0x508>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3b02      	subs	r3, #2
 8001544:	4a99      	ldr	r2, [pc, #612]	; (80017ac <updateLevel+0x50c>)
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154c:	fb04 f303 	mul.w	r3, r4, r3
 8001550:	440a      	add	r2, r1
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	f240 81ae 	bls.w	80018b8 <updateLevel+0x618>
					boxList[boxIndex].y--;
 800155c:	f997 2030 	ldrsb.w	r2, [r7, #48]	; 0x30
 8001560:	4993      	ldr	r1, [pc, #588]	; (80017b0 <updateLevel+0x510>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	440b      	add	r3, r1
 800156a:	3301      	adds	r3, #1
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	498f      	ldr	r1, [pc, #572]	; (80017b0 <updateLevel+0x510>)
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	440b      	add	r3, r1
 800157c:	3301      	adds	r3, #1
 800157e:	4602      	mov	r2, r0
 8001580:	701a      	strb	r2, [r3, #0]
					playerY--;
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <updateLevel+0x508>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b87      	ldr	r3, [pc, #540]	; (80017a8 <updateLevel+0x508>)
 800158c:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 800158e:	4b89      	ldr	r3, [pc, #548]	; (80017b4 <updateLevel+0x514>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b87      	ldr	r3, [pc, #540]	; (80017b4 <updateLevel+0x514>)
 8001598:	801a      	strh	r2, [r3, #0]
 800159a:	e18d      	b.n	80018b8 <updateLevel+0x618>
	}



	// DOWN
	else if ( direction == 2 ){
 800159c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	f040 8083 	bne.w	80016ac <updateLevel+0x40c>
		int8_t boxIndex = hasBoxAt(playerX, playerY+1);
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <updateLevel+0x50c>)
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <updateLevel+0x508>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f7ff fbcb 	bl	8000d50 <hasBoxAt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		if ( playerY < currentLevelHeight-1 ){
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <updateLevel+0x508>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <updateLevel+0x518>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f280 8173 	bge.w	80018b8 <updateLevel+0x618>
			if ( boxIndex == -1 ){
 80015d2:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015da:	d11b      	bne.n	8001614 <updateLevel+0x374>
				if ( (*mapa)[playerY+1][playerX] > 1 ){
 80015dc:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <updateLevel+0x508>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a72      	ldr	r2, [pc, #456]	; (80017ac <updateLevel+0x50c>)
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	4611      	mov	r1, r2
 80015e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ea:	fb04 f303 	mul.w	r3, r4, r3
 80015ee:	440a      	add	r2, r1
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f240 815f 	bls.w	80018b8 <updateLevel+0x618>
					playerY++;
 80015fa:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <updateLevel+0x508>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <updateLevel+0x508>)
 8001604:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 8001606:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <updateLevel+0x514>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <updateLevel+0x514>)
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	e151      	b.n	80018b8 <updateLevel+0x618>
				}
			}else if ( playerY < currentLevelHeight-2-1 ){
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <updateLevel+0x508>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <updateLevel+0x518>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3b03      	subs	r3, #3
 8001620:	429a      	cmp	r2, r3
 8001622:	f280 8149 	bge.w	80018b8 <updateLevel+0x618>
				if ( boxIndex >= 0 && hasBoxAt(playerX, playerY+2) == -1 && (*mapa)[playerY+2][playerX] > 1 ){
 8001626:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800162a:	2b00      	cmp	r3, #0
 800162c:	f2c0 8144 	blt.w	80018b8 <updateLevel+0x618>
 8001630:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <updateLevel+0x50c>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <updateLevel+0x508>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3302      	adds	r3, #2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f7ff fb86 	bl	8000d50 <hasBoxAt>
 8001644:	4603      	mov	r3, r0
 8001646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164a:	f040 8135 	bne.w	80018b8 <updateLevel+0x618>
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <updateLevel+0x508>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3302      	adds	r3, #2
 8001654:	4a55      	ldr	r2, [pc, #340]	; (80017ac <updateLevel+0x50c>)
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165c:	fb04 f303 	mul.w	r3, r4, r3
 8001660:	440a      	add	r2, r1
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	f240 8126 	bls.w	80018b8 <updateLevel+0x618>
					boxList[boxIndex].y++;
 800166c:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 8001670:	494f      	ldr	r1, [pc, #316]	; (80017b0 <updateLevel+0x510>)
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	440b      	add	r3, r1
 800167a:	3301      	adds	r3, #1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	b2d8      	uxtb	r0, r3
 8001682:	494b      	ldr	r1, [pc, #300]	; (80017b0 <updateLevel+0x510>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	440b      	add	r3, r1
 800168c:	3301      	adds	r3, #1
 800168e:	4602      	mov	r2, r0
 8001690:	701a      	strb	r2, [r3, #0]
					playerY++;
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <updateLevel+0x508>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <updateLevel+0x508>)
 800169c:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <updateLevel+0x514>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <updateLevel+0x514>)
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	e105      	b.n	80018b8 <updateLevel+0x618>
	}



	// LEFT
	else if ( direction == 3 ){
 80016ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	f040 8083 	bne.w	80017bc <updateLevel+0x51c>

		int8_t boxIndex = hasBoxAt(playerX-1, playerY);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <updateLevel+0x50c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <updateLevel+0x508>)
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb43 	bl	8000d50 <hasBoxAt>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

		if ( playerX > 0 ){
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <updateLevel+0x50c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ef 	beq.w	80018b8 <updateLevel+0x618>
			if ( boxIndex == -1 ){
 80016da:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80016de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e2:	d11b      	bne.n	800171c <updateLevel+0x47c>
				if ( (*mapa)[playerY][playerX-1] > 1 ){
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <updateLevel+0x508>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <updateLevel+0x50c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016f2:	fb04 f300 	mul.w	r3, r4, r0
 80016f6:	440a      	add	r2, r1
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f240 80db 	bls.w	80018b8 <updateLevel+0x618>
					playerX--;
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <updateLevel+0x50c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <updateLevel+0x50c>)
 800170c:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <updateLevel+0x514>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <updateLevel+0x514>)
 8001718:	801a      	strh	r2, [r3, #0]
 800171a:	e0cd      	b.n	80018b8 <updateLevel+0x618>
				}
			}else if ( playerX >= 3 ){
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <updateLevel+0x50c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	f240 80c9 	bls.w	80018b8 <updateLevel+0x618>
				if ( boxIndex >= 0 && hasBoxAt(playerX-2, playerY) == -1 && (*mapa)[playerY][playerX-2] > 1 ){
 8001726:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800172a:	2b00      	cmp	r3, #0
 800172c:	f2c0 80c4 	blt.w	80018b8 <updateLevel+0x618>
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <updateLevel+0x50c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3b02      	subs	r3, #2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <updateLevel+0x508>)
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb06 	bl	8000d50 <hasBoxAt>
 8001744:	4603      	mov	r3, r0
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	f040 80b5 	bne.w	80018b8 <updateLevel+0x618>
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <updateLevel+0x508>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <updateLevel+0x50c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1e9a      	subs	r2, r3, #2
 800175a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800175c:	fb04 f300 	mul.w	r3, r4, r0
 8001760:	440a      	add	r2, r1
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	f240 80a6 	bls.w	80018b8 <updateLevel+0x618>
					boxList[boxIndex].x--;
 800176c:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <updateLevel+0x510>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	440b      	add	r3, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2d8      	uxtb	r0, r3
 8001780:	490b      	ldr	r1, [pc, #44]	; (80017b0 <updateLevel+0x510>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	440b      	add	r3, r1
 800178a:	4602      	mov	r2, r0
 800178c:	701a      	strb	r2, [r3, #0]
					playerX--;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <updateLevel+0x50c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <updateLevel+0x50c>)
 8001798:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <updateLevel+0x514>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <updateLevel+0x514>)
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	e087      	b.n	80018b8 <updateLevel+0x618>
 80017a8:	200018ed 	.word	0x200018ed
 80017ac:	200018ec 	.word	0x200018ec
 80017b0:	200018d4 	.word	0x200018d4
 80017b4:	200018ea 	.word	0x200018ea
 80017b8:	200018e6 	.word	0x200018e6
	}



	// RIGHT
	else if ( direction == 4 ){
 80017bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d179      	bne.n	80018b8 <updateLevel+0x618>

		int8_t boxIndex = hasBoxAt(playerX+1, playerY);
 80017c4:	4b51      	ldr	r3, [pc, #324]	; (800190c <updateLevel+0x66c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <updateLevel+0x670>)
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fabc 	bl	8000d50 <hasBoxAt>
 80017d8:	4603      	mov	r3, r0
 80017da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if ( playerX < currentLevelWidth-1 ){
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <updateLevel+0x66c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <updateLevel+0x674>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	429a      	cmp	r2, r3
 80017ec:	da64      	bge.n	80018b8 <updateLevel+0x618>
			if ( boxIndex == -1 ){
 80017ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f6:	d11a      	bne.n	800182e <updateLevel+0x58e>
				if ( (*mapa)[playerY][playerX+1] > 1 ){
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <updateLevel+0x670>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <updateLevel+0x66c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001806:	fb04 f300 	mul.w	r3, r4, r0
 800180a:	440a      	add	r2, r1
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d951      	bls.n	80018b8 <updateLevel+0x618>
					playerX++;
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <updateLevel+0x66c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b3b      	ldr	r3, [pc, #236]	; (800190c <updateLevel+0x66c>)
 800181e:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 8001820:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <updateLevel+0x678>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <updateLevel+0x678>)
 800182a:	801a      	strh	r2, [r3, #0]
 800182c:	e044      	b.n	80018b8 <updateLevel+0x618>
				}
			}else if ( playerX < currentLevelWidth-2-1 ){
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <updateLevel+0x66c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <updateLevel+0x674>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3b03      	subs	r3, #3
 800183a:	429a      	cmp	r2, r3
 800183c:	da3c      	bge.n	80018b8 <updateLevel+0x618>
				if ( boxIndex >= 0 && hasBoxAt(playerX+2, playerY) == -1 && (*mapa)[playerY][playerX+2] > 1 ){
 800183e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001842:	2b00      	cmp	r3, #0
 8001844:	db38      	blt.n	80018b8 <updateLevel+0x618>
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <updateLevel+0x66c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3302      	adds	r3, #2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <updateLevel+0x670>)
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa7b 	bl	8000d50 <hasBoxAt>
 800185a:	4603      	mov	r3, r0
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d12a      	bne.n	80018b8 <updateLevel+0x618>
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <updateLevel+0x670>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <updateLevel+0x66c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	1c9a      	adds	r2, r3, #2
 800186e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001870:	fb04 f300 	mul.w	r3, r4, r0
 8001874:	440a      	add	r2, r1
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d91c      	bls.n	80018b8 <updateLevel+0x618>
					boxList[boxIndex].x++;
 800187e:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 8001882:	4926      	ldr	r1, [pc, #152]	; (800191c <updateLevel+0x67c>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	440b      	add	r3, r1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2d8      	uxtb	r0, r3
 8001892:	4922      	ldr	r1, [pc, #136]	; (800191c <updateLevel+0x67c>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	440b      	add	r3, r1
 800189c:	4602      	mov	r2, r0
 800189e:	701a      	strb	r2, [r3, #0]
					playerX++;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <updateLevel+0x66c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <updateLevel+0x66c>)
 80018aa:	701a      	strb	r2, [r3, #0]
					currentMovementCount++;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <updateLevel+0x678>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <updateLevel+0x678>)
 80018b6:	801a      	strh	r2, [r3, #0]




	// UPDATE
	updateBox(currentLevelIndex);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <updateLevel+0x680>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa7d 	bl	8000dbc <updateBox>
	renderBitmap(20*playerX+offsetMap[0], 20*playerY+offsetMap[1], 20, 20, spriteList[5]);
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <updateLevel+0x66c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <updateLevel+0x684>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4413      	add	r3, r2
 80018da:	b298      	uxth	r0, r3
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <updateLevel+0x670>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <updateLevel+0x684>)
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b299      	uxth	r1, r3
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <updateLevel+0x688>)
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2314      	movs	r3, #20
 80018fc:	2214      	movs	r2, #20
 80018fe:	f7fe ff4b 	bl	8000798 <renderBitmap>


}
 8001902:	bf00      	nop
 8001904:	374c      	adds	r7, #76	; 0x4c
 8001906:	46bd      	mov	sp, r7
 8001908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800190c:	200018ec 	.word	0x200018ec
 8001910:	200018ed 	.word	0x200018ed
 8001914:	200018e5 	.word	0x200018e5
 8001918:	200018ea 	.word	0x200018ea
 800191c:	200018d4 	.word	0x200018d4
 8001920:	200018e4 	.word	0x200018e4
 8001924:	200018e8 	.word	0x200018e8
 8001928:	20000fa0 	.word	0x20000fa0

0800192c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001934:	1d39      	adds	r1, r7, #4
 8001936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193a:	2201      	movs	r2, #1
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <__io_putchar+0x20>)
 800193e:	f001 fe71 	bl	8003624 <HAL_UART_Transmit>

  return ch;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20001888 	.word	0x20001888

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 fc79 	bl	800224c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f997 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f000 fa3b 	bl	8001dd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001962:	f000 f9d9 	bl	8001d18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001966:	f000 fa0d 	bl	8001d84 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // SCK LOW STATE
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	48ac      	ldr	r0, [pc, #688]	; (8001c20 <main+0x2d0>)
 8001970:	f000 ff71 	bl	8002856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197a:	48aa      	ldr	r0, [pc, #680]	; (8001c24 <main+0x2d4>)
 800197c:	f000 ff6b 	bl	8002856 <HAL_GPIO_WritePin>


  //HAL_UART_Transmit(&huart2, (uint8_t *)"INIT", 4, 1000);

  printf("INIT\r\n");
 8001980:	48a9      	ldr	r0, [pc, #676]	; (8001c28 <main+0x2d8>)
 8001982:	f002 f8e5 	bl	8003b50 <puts>





  tft_init();
 8001986:	f7fe fc47 	bl	8000218 <tft_init>


  // black screen


  tft_fillRect(0, 0, 240, 240, 0x0000);
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	23f0      	movs	r3, #240	; 0xf0
 8001990:	22f0      	movs	r2, #240	; 0xf0
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f7fe fd37 	bl	8000408 <tft_fillRect>
  showMenu();
 800199a:	f7ff fc63 	bl	8001264 <showMenu>

	// center
	//tft_drawFastHLine(0, 240/2, 240, tft_color565(255, 0, 255) );
	//tft_drawFastVLine(240/2, 0, 240, tft_color565(255, 0, 255) );

	if ( !keyLocked ){
 800199e:	4ba3      	ldr	r3, [pc, #652]	; (8001c2c <main+0x2dc>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80ba 	bne.w	8001b1c <main+0x1cc>

		if ( !HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) ){
 80019a8:	2110      	movs	r1, #16
 80019aa:	48a1      	ldr	r0, [pc, #644]	; (8001c30 <main+0x2e0>)
 80019ac:	f000 ff3c 	bl	8002828 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10e      	bne.n	80019d4 <main+0x84>
			if ( !keyPressed ){
 80019b6:	4b9f      	ldr	r3, [pc, #636]	; (8001c34 <main+0x2e4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80ae 	bne.w	8001b1c <main+0x1cc>
				keyPressed = 1;
 80019c0:	4b9c      	ldr	r3, [pc, #624]	; (8001c34 <main+0x2e4>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
				movementDirection = 1;
 80019c6:	4b9c      	ldr	r3, [pc, #624]	; (8001c38 <main+0x2e8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
				HAL_Delay(5);
 80019cc:	2005      	movs	r0, #5
 80019ce:	f000 fc9f 	bl	8002310 <HAL_Delay>
 80019d2:	e0a3      	b.n	8001b1c <main+0x1cc>
			}
		}else if ( !HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) ){
 80019d4:	2120      	movs	r1, #32
 80019d6:	4896      	ldr	r0, [pc, #600]	; (8001c30 <main+0x2e0>)
 80019d8:	f000 ff26 	bl	8002828 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10e      	bne.n	8001a00 <main+0xb0>
			if ( !keyPressed ){
 80019e2:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <main+0x2e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 8098 	bne.w	8001b1c <main+0x1cc>
				keyPressed = 1;
 80019ec:	4b91      	ldr	r3, [pc, #580]	; (8001c34 <main+0x2e4>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
				movementDirection = 2;
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <main+0x2e8>)
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]
				HAL_Delay(5);
 80019f8:	2005      	movs	r0, #5
 80019fa:	f000 fc89 	bl	8002310 <HAL_Delay>
 80019fe:	e08d      	b.n	8001b1c <main+0x1cc>
			}
		}else if ( !HAL_GPIO_ReadPin(KEY_LEFT_GPIO_Port, KEY_LEFT_Pin) ){
 8001a00:	2140      	movs	r1, #64	; 0x40
 8001a02:	488b      	ldr	r0, [pc, #556]	; (8001c30 <main+0x2e0>)
 8001a04:	f000 ff10 	bl	8002828 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <main+0xdc>
			if ( !keyPressed ){
 8001a0e:	4b89      	ldr	r3, [pc, #548]	; (8001c34 <main+0x2e4>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8082 	bne.w	8001b1c <main+0x1cc>
				keyPressed = 1;
 8001a18:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <main+0x2e4>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
				movementDirection = 3;
 8001a1e:	4b86      	ldr	r3, [pc, #536]	; (8001c38 <main+0x2e8>)
 8001a20:	2203      	movs	r2, #3
 8001a22:	701a      	strb	r2, [r3, #0]
				HAL_Delay(5);
 8001a24:	2005      	movs	r0, #5
 8001a26:	f000 fc73 	bl	8002310 <HAL_Delay>
 8001a2a:	e077      	b.n	8001b1c <main+0x1cc>
			}
		}else if ( !HAL_GPIO_ReadPin(KEY_RIGHT_GPIO_Port, KEY_RIGHT_Pin) ){
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	4880      	ldr	r0, [pc, #512]	; (8001c30 <main+0x2e0>)
 8001a30:	f000 fefa 	bl	8002828 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <main+0x106>
			if ( !keyPressed ){
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <main+0x2e4>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d16c      	bne.n	8001b1c <main+0x1cc>
				keyPressed = 1;
 8001a42:	4b7c      	ldr	r3, [pc, #496]	; (8001c34 <main+0x2e4>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
				movementDirection = 4;
 8001a48:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <main+0x2e8>)
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(5);
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 fc5e 	bl	8002310 <HAL_Delay>
 8001a54:	e062      	b.n	8001b1c <main+0x1cc>
			}
		}
		else if ( !HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin) ){
 8001a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5a:	4875      	ldr	r0, [pc, #468]	; (8001c30 <main+0x2e0>)
 8001a5c:	f000 fee4 	bl	8002828 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d130      	bne.n	8001ac8 <main+0x178>
			if ( !keyPressed ){
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <main+0x2e4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d156      	bne.n	8001b1c <main+0x1cc>
				keyPressed = 1;
 8001a6e:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <main+0x2e4>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]

				if ( isMenuMode ){
 8001a74:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <main+0x2ec>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <main+0x148>
					tft_fillRect(0, 0, 240, 240, 0x0000);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	23f0      	movs	r3, #240	; 0xf0
 8001a82:	22f0      	movs	r2, #240	; 0xf0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7fe fcbe 	bl	8000408 <tft_fillRect>
					generateLevelByIndex(currentLevelIndex);
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <main+0x2f0>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f879 	bl	8000b88 <generateLevelByIndex>
 8001a96:	e009      	b.n	8001aac <main+0x15c>
				}else{
					tft_fillRect(0, 0, 240, 240, 0x0000);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	23f0      	movs	r3, #240	; 0xf0
 8001a9e:	22f0      	movs	r2, #240	; 0xf0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7fe fcb0 	bl	8000408 <tft_fillRect>
					showMenu();
 8001aa8:	f7ff fbdc 	bl	8001264 <showMenu>
				}
				isMenuMode = !isMenuMode;
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <main+0x2ec>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <main+0x2ec>)
 8001abe:	701a      	strb	r2, [r3, #0]


				HAL_Delay(5);
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f000 fc25 	bl	8002310 <HAL_Delay>
 8001ac6:	e029      	b.n	8001b1c <main+0x1cc>
			}
		}else if ( !HAL_GPIO_ReadPin(KEY_RESTART_GPIO_Port, KEY_RESTART_Pin) ){
 8001ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001acc:	4858      	ldr	r0, [pc, #352]	; (8001c30 <main+0x2e0>)
 8001ace:	f000 feab 	bl	8002828 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11b      	bne.n	8001b10 <main+0x1c0>
			if ( !keyPressed ){
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <main+0x2e4>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <main+0x1cc>
				keyPressed = 1;
 8001ae0:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <main+0x2e4>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
				if ( !isMenuMode ){
 8001ae6:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <main+0x2ec>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <main+0x1b8>
					tft_fillRect(0, 0, 240, 240, 0x0000);
 8001aee:	2300      	movs	r3, #0
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	23f0      	movs	r3, #240	; 0xf0
 8001af4:	22f0      	movs	r2, #240	; 0xf0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7fe fc85 	bl	8000408 <tft_fillRect>
					generateLevelByIndex(currentLevelIndex);
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <main+0x2f0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f840 	bl	8000b88 <generateLevelByIndex>
				}
				HAL_Delay(5);
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f000 fc01 	bl	8002310 <HAL_Delay>
 8001b0e:	e005      	b.n	8001b1c <main+0x1cc>
			}
		}

		else{
			movementDirection = 0;
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <main+0x2e8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
			keyPressed = 0;
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <main+0x2e4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
	}




	if ( movementDirection != 0 ){
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <main+0x2e8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f43f af3c 	beq.w	800199e <main+0x4e>

		if ( isMenuMode ){
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <main+0x2ec>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02f      	beq.n	8001b8e <main+0x23e>

			if ( movementDirection == 3 ){
 8001b2e:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <main+0x2e8>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d110      	bne.n	8001b58 <main+0x208>
				if (currentLevelIndex > 0){
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <main+0x2f0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <main+0x200>
					currentLevelIndex--;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <main+0x2f0>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <main+0x2f0>)
 8001b48:	701a      	strb	r2, [r3, #0]
					showMenu();
 8001b4a:	f7ff fb8b 	bl	8001264 <showMenu>
 8001b4e:	e01a      	b.n	8001b86 <main+0x236>
				}else{
					currentLevelIndex = 20 - 1;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <main+0x2f0>)
 8001b52:	2213      	movs	r2, #19
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e016      	b.n	8001b86 <main+0x236>
				}
			}else if ( movementDirection == 4 ){
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <main+0x2e8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d112      	bne.n	8001b86 <main+0x236>
				currentLevelIndex = (currentLevelIndex + 1) % 20;
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <main+0x2f0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <main+0x2f4>)
 8001b68:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6c:	10d9      	asrs	r1, r3, #3
 8001b6e:	17d3      	asrs	r3, r2, #31
 8001b70:	1ac9      	subs	r1, r1, r3
 8001b72:	460b      	mov	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	1ad1      	subs	r1, r2, r3
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <main+0x2f0>)
 8001b80:	701a      	strb	r2, [r3, #0]
				showMenu();
 8001b82:	f7ff fb6f 	bl	8001264 <showMenu>
			}
			movementDirection = 0;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <main+0x2e8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			continue;
 8001b8c:	e077      	b.n	8001c7e <main+0x32e>
		}



		updateLevel(movementDirection);
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <main+0x2e8>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb84 	bl	80012a0 <updateLevel>

		if ( gameWin() ){
 8001b98:	f7ff fa48 	bl	800102c <gameWin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06a      	beq.n	8001c78 <main+0x328>
			keyLocked = 1;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <main+0x2dc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
			keyPressed = 0;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <main+0x2e4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

			showSummary();
 8001bae:	f7ff fb0d 	bl	80011cc <showSummary>
			HAL_Delay(1000);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb6:	f000 fbab 	bl	8002310 <HAL_Delay>

			currentLevelIndex = (currentLevelIndex + 1) % 20;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <main+0x2f0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <main+0x2f4>)
 8001bc2:	fb83 1302 	smull	r1, r3, r3, r2
 8001bc6:	10d9      	asrs	r1, r3, #3
 8001bc8:	17d3      	asrs	r3, r2, #31
 8001bca:	1ac9      	subs	r1, r1, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	1ad1      	subs	r1, r2, r3
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <main+0x2f0>)
 8001bda:	701a      	strb	r2, [r3, #0]
			if ( currentLevelIndex == 0 ){
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <main+0x2f0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d133      	bne.n	8001c4c <main+0x2fc>
				tft_drawText(30, 100, "END :)", 0xFFFF, 0x0000, 5);
 8001be4:	2305      	movs	r3, #5
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf0:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <main+0x2f8>)
 8001bf2:	2164      	movs	r1, #100	; 0x64
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f7fe fd63 	bl	80006c0 <tft_drawText>
				HAL_Delay(1000);
 8001bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfe:	f000 fb87 	bl	8002310 <HAL_Delay>
				isMenuMode = 1;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <main+0x2ec>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				tft_fillRect(0, 0, 240, 240, 0x0000);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	23f0      	movs	r3, #240	; 0xf0
 8001c0e:	22f0      	movs	r2, #240	; 0xf0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7fe fbf8 	bl	8000408 <tft_fillRect>
				showMenu();
 8001c18:	f7ff fb24 	bl	8001264 <showMenu>
 8001c1c:	e029      	b.n	8001c72 <main+0x322>
 8001c1e:	bf00      	nop
 8001c20:	40010800 	.word	0x40010800
 8001c24:	40011000 	.word	0x40011000
 8001c28:	08004998 	.word	0x08004998
 8001c2c:	200018f0 	.word	0x200018f0
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	200018ef 	.word	0x200018ef
 8001c38:	200018ee 	.word	0x200018ee
 8001c3c:	200012c0 	.word	0x200012c0
 8001c40:	200018e4 	.word	0x200018e4
 8001c44:	66666667 	.word	0x66666667
 8001c48:	080049a0 	.word	0x080049a0
			}else{
				showCurrentLevel();
 8001c4c:	f7ff fae4 	bl	8001218 <showCurrentLevel>
				HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c54:	f000 fb5c 	bl	8002310 <HAL_Delay>
				tft_fillRect(0, 0, 240, 240, 0x0000);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	23f0      	movs	r3, #240	; 0xf0
 8001c5e:	22f0      	movs	r2, #240	; 0xf0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7fe fbd0 	bl	8000408 <tft_fillRect>
				generateLevelByIndex(currentLevelIndex);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <main+0x330>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ff8b 	bl	8000b88 <generateLevelByIndex>
			}


			keyLocked = 0;
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <main+0x334>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
		}

		movementDirection = 0;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <main+0x338>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
	if ( !keyLocked ){
 8001c7e:	e68e      	b.n	800199e <main+0x4e>
 8001c80:	200018e4 	.word	0x200018e4
 8001c84:	200018f0 	.word	0x200018f0
 8001c88:	200018ee 	.word	0x200018ee

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	2228      	movs	r2, #40	; 0x28
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 f858 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd0:	f107 0318 	add.w	r3, r7, #24
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fdd7 	bl	8002888 <HAL_RCC_OscConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ce0:	f000 f8f6 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cf0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 f844 	bl	8002d8c <HAL_RCC_ClockConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d0a:	f000 f8e1 	bl	8001ed0 <Error_Handler>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3740      	adds	r7, #64	; 0x40
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <MX_SPI1_Init+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d64:	220a      	movs	r2, #10
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d6a:	f001 f99d 	bl	80030a8 <HAL_SPI_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d74:	f000 f8ac 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20001830 	.word	0x20001830
 8001d80:	40013000 	.word	0x40013000

08001d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_USART2_UART_Init+0x4c>)
 8001dbc:	f001 fbe2 	bl	8003584 <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dc6:	f000 f883 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20001888 	.word	0x20001888
 8001dd4:	40004400 	.word	0x40004400

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <MX_GPIO_Init+0xec>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e52:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e54:	f000 fcff 	bl	8002856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <MX_GPIO_Init+0xf4>)
 8001e60:	f000 fcf9 	bl	8002856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e7e:	f000 fb4f 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8001e82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <MX_GPIO_Init+0xf4>)
 8001e9c:	f000 fb40 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_UP_Pin KEY_DOWN_Pin KEY_LEFT_Pin KEY_RIGHT_Pin
                           KEY_ENTER_Pin KEY_RESTART_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_DOWN_Pin|KEY_LEFT_Pin|KEY_RIGHT_Pin
 8001ea0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001ea4:	613b      	str	r3, [r7, #16]
                          |KEY_ENTER_Pin|KEY_RESTART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_GPIO_Init+0xf4>)
 8001eb6:	f000 fb33 	bl	8002520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_MspInit+0x5c>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_MspInit+0x60>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_MspInit+0x60>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000

08001f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d12f      	bne.n	8001fc0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f90:	23a0      	movs	r3, #160	; 0xa0
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <HAL_SPI_MspInit+0x90>)
 8001fa4:	f000 fabc 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_SPI_MspInit+0x90>)
 8001fbc:	f000 fab0 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010800 	.word	0x40010800

08001fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_UART_MspInit+0x88>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d12f      	bne.n	8002054 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_UART_MspInit+0x8c>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_UART_MspInit+0x8c>)
 8001ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffe:	61d3      	str	r3, [r2, #28]
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_UART_MspInit+0x8c>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_UART_MspInit+0x8c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_UART_MspInit+0x8c>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_UART_MspInit+0x8c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002024:	2304      	movs	r3, #4
 8002026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	480b      	ldr	r0, [pc, #44]	; (8002064 <HAL_UART_MspInit+0x90>)
 8002038:	f000 fa72 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800203c:	2308      	movs	r3, #8
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_UART_MspInit+0x90>)
 8002050:	f000 fa66 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40004400 	.word	0x40004400
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 f913 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e00a      	b.n	80020de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c8:	f3af 8000 	nop.w
 80020cc:	4601      	mov	r1, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	60ba      	str	r2, [r7, #8]
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbf0      	blt.n	80020c8 <_read+0x12>
  }

  return len;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e009      	b.n	8002116 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60ba      	str	r2, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc0e 	bl	800192c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	dbf1      	blt.n	8002102 <_write+0x12>
  }
  return len;
 800211e:	687b      	ldr	r3, [r7, #4]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_close>:

int _close(int file)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	605a      	str	r2, [r3, #4]
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <_isatty>:

int _isatty(int file)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f001 fe18 	bl	8003dec <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20005000 	.word	0x20005000
 80021e8:	00000400 	.word	0x00000400
 80021ec:	200018f4 	.word	0x200018f4
 80021f0:	20001a48 	.word	0x20001a48

080021f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002200:	f7ff fff8 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002206:	490c      	ldr	r1, [pc, #48]	; (8002238 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002208:	4a0c      	ldr	r2, [pc, #48]	; (800223c <LoopFillZerobss+0x16>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800221c:	4c09      	ldr	r4, [pc, #36]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f001 fde5 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222e:	f7ff fb8f 	bl	8001950 <main>
  bx lr
 8002232:	4770      	bx	lr
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	20001814 	.word	0x20001814
  ldr r2, =_sidata
 800223c:	08004bec 	.word	0x08004bec
  ldr r2, =_sbss
 8002240:	20001814 	.word	0x20001814
  ldr r4, =_ebss
 8002244:	20001a48 	.word	0x20001a48

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>
	...

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x28>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x28>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f92b 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fe38 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f935 	bl	8002506 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f90b 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200017ac 	.word	0x200017ac
 80022d0:	200017b4 	.word	0x200017b4
 80022d4:	200017b0 	.word	0x200017b0

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_IncTick+0x20>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	200017b4 	.word	0x200017b4
 80022f8:	200018f8 	.word	0x200018f8

080022fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	200018f8 	.word	0x200018f8

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff0 	bl	80022fc <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffe0 	bl	80022fc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200017b4 	.word	0x200017b4

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff90 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff49 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff5e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff90 	bl	8002410 <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5f 	bl	80023bc <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffb0 	bl	8002474 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b08b      	sub	sp, #44	; 0x2c
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e169      	b.n	8002808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002534:	2201      	movs	r2, #1
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8158 	bne.w	8002802 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a9a      	ldr	r2, [pc, #616]	; (80027c0 <HAL_GPIO_Init+0x2a0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d05e      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 800255c:	4a98      	ldr	r2, [pc, #608]	; (80027c0 <HAL_GPIO_Init+0x2a0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d875      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002562:	4a98      	ldr	r2, [pc, #608]	; (80027c4 <HAL_GPIO_Init+0x2a4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d058      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002568:	4a96      	ldr	r2, [pc, #600]	; (80027c4 <HAL_GPIO_Init+0x2a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d86f      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800256e:	4a96      	ldr	r2, [pc, #600]	; (80027c8 <HAL_GPIO_Init+0x2a8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d052      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002574:	4a94      	ldr	r2, [pc, #592]	; (80027c8 <HAL_GPIO_Init+0x2a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d869      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800257a:	4a94      	ldr	r2, [pc, #592]	; (80027cc <HAL_GPIO_Init+0x2ac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04c      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002580:	4a92      	ldr	r2, [pc, #584]	; (80027cc <HAL_GPIO_Init+0x2ac>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d863      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002586:	4a92      	ldr	r2, [pc, #584]	; (80027d0 <HAL_GPIO_Init+0x2b0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d046      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 800258c:	4a90      	ldr	r2, [pc, #576]	; (80027d0 <HAL_GPIO_Init+0x2b0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d85d      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002592:	2b12      	cmp	r3, #18
 8002594:	d82a      	bhi.n	80025ec <HAL_GPIO_Init+0xcc>
 8002596:	2b12      	cmp	r3, #18
 8002598:	d859      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <HAL_GPIO_Init+0x80>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	0800261b 	.word	0x0800261b
 80025a4:	080025f5 	.word	0x080025f5
 80025a8:	08002607 	.word	0x08002607
 80025ac:	08002649 	.word	0x08002649
 80025b0:	0800264f 	.word	0x0800264f
 80025b4:	0800264f 	.word	0x0800264f
 80025b8:	0800264f 	.word	0x0800264f
 80025bc:	0800264f 	.word	0x0800264f
 80025c0:	0800264f 	.word	0x0800264f
 80025c4:	0800264f 	.word	0x0800264f
 80025c8:	0800264f 	.word	0x0800264f
 80025cc:	0800264f 	.word	0x0800264f
 80025d0:	0800264f 	.word	0x0800264f
 80025d4:	0800264f 	.word	0x0800264f
 80025d8:	0800264f 	.word	0x0800264f
 80025dc:	0800264f 	.word	0x0800264f
 80025e0:	0800264f 	.word	0x0800264f
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	08002611 	.word	0x08002611
 80025ec:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <HAL_GPIO_Init+0x2b4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025f2:	e02c      	b.n	800264e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e029      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	3304      	adds	r3, #4
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e024      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	3308      	adds	r3, #8
 800260c:	623b      	str	r3, [r7, #32]
          break;
 800260e:	e01f      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	330c      	adds	r3, #12
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e01a      	b.n	8002650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002622:	2304      	movs	r3, #4
 8002624:	623b      	str	r3, [r7, #32]
          break;
 8002626:	e013      	b.n	8002650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002630:	2308      	movs	r3, #8
 8002632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	611a      	str	r2, [r3, #16]
          break;
 800263a:	e009      	b.n	8002650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	615a      	str	r2, [r3, #20]
          break;
 8002646:	e003      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x130>
          break;
 800264e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d801      	bhi.n	800265a <HAL_GPIO_Init+0x13a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	e001      	b.n	800265e <HAL_GPIO_Init+0x13e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d802      	bhi.n	800266c <HAL_GPIO_Init+0x14c>
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_Init+0x152>
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	3b08      	subs	r3, #8
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	210f      	movs	r1, #15
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80b1 	beq.w	8002802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x2b8>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a4c      	ldr	r2, [pc, #304]	; (80027d8 <HAL_GPIO_Init+0x2b8>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_GPIO_Init+0x2b8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_GPIO_Init+0x2bc>)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <HAL_GPIO_Init+0x2c0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <HAL_GPIO_Init+0x1ec>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <HAL_GPIO_Init+0x2c4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00d      	beq.n	8002708 <HAL_GPIO_Init+0x1e8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <HAL_GPIO_Init+0x2c8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <HAL_GPIO_Init+0x1e4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <HAL_GPIO_Init+0x2cc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_GPIO_Init+0x1e0>
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_GPIO_Init+0x1ee>
 8002700:	2304      	movs	r3, #4
 8002702:	e004      	b.n	800270e <HAL_GPIO_Init+0x1ee>
 8002704:	2302      	movs	r3, #2
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0x1ee>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_GPIO_Init+0x1ee>
 800270c:	2300      	movs	r3, #0
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	f002 0203 	and.w	r2, r2, #3
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	4093      	lsls	r3, r2
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800271e:	492f      	ldr	r1, [pc, #188]	; (80027dc <HAL_GPIO_Init+0x2bc>)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002738:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	492c      	ldr	r1, [pc, #176]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	4928      	ldr	r1, [pc, #160]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	491e      	ldr	r1, [pc, #120]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4918      	ldr	r1, [pc, #96]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	4914      	ldr	r1, [pc, #80]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d021      	beq.n	80027f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e021      	b.n	8002802 <HAL_GPIO_Init+0x2e2>
 80027be:	bf00      	nop
 80027c0:	10320000 	.word	0x10320000
 80027c4:	10310000 	.word	0x10310000
 80027c8:	10220000 	.word	0x10220000
 80027cc:	10210000 	.word	0x10210000
 80027d0:	10120000 	.word	0x10120000
 80027d4:	10110000 	.word	0x10110000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010000 	.word	0x40010000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40011400 	.word	0x40011400
 80027f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_GPIO_Init+0x304>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	4909      	ldr	r1, [pc, #36]	; (8002824 <HAL_GPIO_Init+0x304>)
 80027fe:	4013      	ands	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	f47f ae8e 	bne.w	8002534 <HAL_GPIO_Init+0x14>
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	372c      	adds	r7, #44	; 0x2c
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40010400 	.word	0x40010400

08002828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e001      	b.n	800284a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	807b      	strh	r3, [r7, #2]
 8002862:	4613      	mov	r3, r2
 8002864:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002866:	787b      	ldrb	r3, [r7, #1]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002872:	e003      	b.n	800287c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	041a      	lsls	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	611a      	str	r2, [r3, #16]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
	...

08002888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e272      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8087 	beq.w	80029b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a8:	4b92      	ldr	r3, [pc, #584]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d00c      	beq.n	80028ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b4:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d112      	bne.n	80028e6 <HAL_RCC_OscConfig+0x5e>
 80028c0:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ce:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d06c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x12c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d168      	bne.n	80029b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e24c      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_OscConfig+0x76>
 80028f0:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a7f      	ldr	r2, [pc, #508]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e02e      	b.n	800295c <HAL_RCC_OscConfig+0xd4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x98>
 8002906:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7a      	ldr	r2, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e01d      	b.n	800295c <HAL_RCC_OscConfig+0xd4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0xbc>
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a71      	ldr	r2, [pc, #452]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0xd4>
 8002944:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6a      	ldr	r2, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 800294a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff fcca 	bl	80022fc <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff fcc6 	bl	80022fc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e200      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0xe4>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fcb6 	bl	80022fc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7ff fcb2 	bl	80022fc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1ec      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x10c>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d063      	beq.n	8002a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c2:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x18c>
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d116      	bne.n	8002a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x176>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1c0      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4939      	ldr	r1, [pc, #228]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	e03a      	b.n	8002a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fc6b 	bl	80022fc <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7ff fc67 	bl	80022fc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1a1      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4927      	ldr	r1, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
 8002a5c:	e015      	b.n	8002a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fc4a 	bl	80022fc <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7ff fc46 	bl	80022fc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e180      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03a      	beq.n	8002b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_RCC_OscConfig+0x274>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7ff fc2a 	bl	80022fc <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7ff fc26 	bl	80022fc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e160      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aca:	2001      	movs	r0, #1
 8002acc:	f000 face 	bl	800306c <RCC_Delay>
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_OscConfig+0x274>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7ff fc10 	bl	80022fc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ade:	e00f      	b.n	8002b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7ff fc0c 	bl	80022fc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d908      	bls.n	8002b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e146      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	42420000 	.word	0x42420000
 8002afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	4b92      	ldr	r3, [pc, #584]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e9      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a6 	beq.w	8002c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1e:	4b8b      	ldr	r3, [pc, #556]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	61d3      	str	r3, [r2, #28]
 8002b36:	4b85      	ldr	r3, [pc, #532]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_OscConfig+0x4c8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b7f      	ldr	r3, [pc, #508]	; (8002d50 <HAL_RCC_OscConfig+0x4c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7e      	ldr	r2, [pc, #504]	; (8002d50 <HAL_RCC_OscConfig+0x4c8>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff fbcd 	bl	80022fc <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7ff fbc9 	bl	80022fc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e103      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b75      	ldr	r3, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x4c8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x312>
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a6e      	ldr	r2, [pc, #440]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	e02d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x36e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x334>
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4a69      	ldr	r2, [pc, #420]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	4b67      	ldr	r3, [pc, #412]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	e01c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x36e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d10c      	bne.n	8002bde <HAL_RCC_OscConfig+0x356>
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a60      	ldr	r2, [pc, #384]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	e00b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x36e>
 8002bde:	4b5b      	ldr	r3, [pc, #364]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a5a      	ldr	r2, [pc, #360]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7ff fb7d 	bl	80022fc <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7ff fb79 	bl	80022fc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0b1      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCC_OscConfig+0x37e>
 8002c28:	e014      	b.n	8002c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7ff fb67 	bl	80022fc <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7ff fb63 	bl	80022fc <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e09b      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4a3b      	ldr	r2, [pc, #236]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8087 	beq.w	8002d7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d061      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d146      	bne.n	8002d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff fb37 	bl	80022fc <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7ff fb33 	bl	80022fc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e06d      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4921      	ldr	r1, [pc, #132]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a19      	ldr	r1, [r3, #32]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff fb07 	bl	80022fc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7ff fb03 	bl	80022fc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e03d      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x46a>
 8002d10:	e035      	b.n	8002d7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff faf0 	bl	80022fc <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff faec 	bl	80022fc <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e026      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x498>
 8002d3e:	e01e      	b.n	8002d7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e019      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x500>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000

08002d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0d0      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4965      	ldr	r1, [pc, #404]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b8      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e00:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0c:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	494d      	ldr	r1, [pc, #308]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d040      	beq.n	8002eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d115      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e07f      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e073      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06b      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4936      	ldr	r1, [pc, #216]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7ff fa3e 	bl	80022fc <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7ff fa3a 	bl	80022fc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e053      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d210      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4922      	ldr	r1, [pc, #136]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e032      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4916      	ldr	r1, [pc, #88]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f1a:	f000 f821 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	490a      	ldr	r1, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	5ccb      	ldrb	r3, [r1, r3]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1cc>)
 8002f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1d0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f99c 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08004b84 	.word	0x08004b84
 8002f58:	200017ac 	.word	0x200017ac
 8002f5c:	200017b0 	.word	0x200017b0

08002f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x30>
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x36>
 8002f8e:	e027      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f92:	613b      	str	r3, [r7, #16]
      break;
 8002f94:	e027      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0c9b      	lsrs	r3, r3, #18
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0c5b      	lsrs	r3, r3, #17
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc2:	fb03 f202 	mul.w	r2, r3, r2
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e004      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	613b      	str	r3, [r7, #16]
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe2:	613b      	str	r3, [r7, #16]
      break;
 8002fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe6:	693b      	ldr	r3, [r7, #16]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	08004b9c 	.word	0x08004b9c
 8003000:	08004bac 	.word	0x08004bac
 8003004:	003d0900 	.word	0x003d0900

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_RCC_GetHCLKFreq+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	200017ac 	.word	0x200017ac

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003020:	f7ff fff2 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08004b94 	.word	0x08004b94

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003048:	f7ff ffde 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08004b94 	.word	0x08004b94

0800306c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <RCC_Delay+0x34>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <RCC_Delay+0x38>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003088:	bf00      	nop
  }
  while (Delay --);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f9      	bne.n	8003088 <RCC_Delay+0x1c>
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	200017ac 	.word	0x200017ac
 80030a4:	10624dd3 	.word	0x10624dd3

080030a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e076      	b.n	80031a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ca:	d009      	beq.n	80030e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
 80030d2:	e005      	b.n	80030e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe ff20 	bl	8001f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003116:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	ea42 0103 	orr.w	r1, r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	0c1a      	lsrs	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f002 0204 	and.w	r2, r2, #4
 8003186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_SPI_Transmit+0x22>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e12d      	b.n	800342e <HAL_SPI_Transmit+0x27e>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031da:	f7ff f88f 	bl	80022fc <HAL_GetTick>
 80031de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f4:	e116      	b.n	8003424 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_Transmit+0x52>
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003206:	e10d      	b.n	8003424 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2203      	movs	r2, #3
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d10f      	bne.n	8003270 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d007      	beq.n	800328e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d14f      	bne.n	8003338 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_Transmit+0xf6>
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d142      	bne.n	800332c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ca:	e02f      	b.n	800332c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d112      	bne.n	8003300 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	1c9a      	adds	r2, r3, #2
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80032fe:	e015      	b.n	800332c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003300:	f7fe fffc 	bl	80022fc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d803      	bhi.n	8003318 <HAL_SPI_Transmit+0x168>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d102      	bne.n	800331e <HAL_SPI_Transmit+0x16e>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800332a:	e07b      	b.n	8003424 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ca      	bne.n	80032cc <HAL_SPI_Transmit+0x11c>
 8003336:	e050      	b.n	80033da <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_SPI_Transmit+0x196>
 8003340:	8afb      	ldrh	r3, [r7, #22]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d144      	bne.n	80033d0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800336c:	e030      	b.n	80033d0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d113      	bne.n	80033a4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80033a2:	e015      	b.n	80033d0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a4:	f7fe ffaa 	bl	80022fc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d803      	bhi.n	80033bc <HAL_SPI_Transmit+0x20c>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Transmit+0x212>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033ce:	e029      	b.n	8003424 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c9      	bne.n	800336e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8b2 	bl	8003548 <SPI_EndRxTxTransaction>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e003      	b.n	8003424 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003448:	f7fe ff58 	bl	80022fc <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003458:	f7fe ff50 	bl	80022fc <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	0d1b      	lsrs	r3, r3, #20
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	e054      	b.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d050      	beq.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003478:	f7fe ff40 	bl	80022fc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	d902      	bls.n	800348e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d13d      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800349c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a6:	d111      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b0:	d004      	beq.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d107      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d10f      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e017      	b.n	800353a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3b01      	subs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d19b      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200017ac 	.word	0x200017ac

08003548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff6a 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e000      	b.n	800357c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e042      	b.n	800361c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fd12 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f91d 	bl	8003808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b20      	cmp	r3, #32
 8003642:	d16d      	bne.n	8003720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_UART_Transmit+0x2c>
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e066      	b.n	8003722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003662:	f7fe fe4b 	bl	80022fc <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d108      	bne.n	8003690 <HAL_UART_Transmit+0x6c>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e003      	b.n	8003698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003698:	e02a      	b.n	80036f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2180      	movs	r1, #128	; 0x80
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f840 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e036      	b.n	8003722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	3302      	adds	r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e007      	b.n	80036e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	3301      	adds	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1cf      	bne.n	800369a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2140      	movs	r1, #64	; 0x40
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f810 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e006      	b.n	8003722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b090      	sub	sp, #64	; 0x40
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373a:	e050      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d04c      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <UART_WaitOnFlagUntilTimeout+0x30>
 800374a:	f7fe fdd7 	bl	80022fc <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003756:	429a      	cmp	r2, r3
 8003758:	d241      	bcs.n	80037de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800377a:	637a      	str	r2, [r7, #52]	; 0x34
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	613b      	str	r3, [r7, #16]
   return(result);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ae:	623a      	str	r2, [r7, #32]
 80037b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e00f      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d09f      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3740      	adds	r7, #64	; 0x40
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003842:	f023 030c 	bic.w	r3, r3, #12
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	430b      	orrs	r3, r1
 800384e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <UART_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7ff fbe8 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	e002      	b.n	800387e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff fbd0 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <UART_SetConfig+0x118>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	0119      	lsls	r1, r3, #4
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <UART_SetConfig+0x118>)
 80038b6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2064      	movs	r0, #100	; 0x64
 80038be:	fb00 f303 	mul.w	r3, r0, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <UART_SetConfig+0x118>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d4:	4419      	add	r1, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <UART_SetConfig+0x118>)
 80038ee:	fba3 0302 	umull	r0, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2064      	movs	r0, #100	; 0x64
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	440a      	add	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013800 	.word	0x40013800
 8003920:	51eb851f 	.word	0x51eb851f

08003924 <std>:
 8003924:	2300      	movs	r3, #0
 8003926:	b510      	push	{r4, lr}
 8003928:	4604      	mov	r4, r0
 800392a:	e9c0 3300 	strd	r3, r3, [r0]
 800392e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003932:	6083      	str	r3, [r0, #8]
 8003934:	8181      	strh	r1, [r0, #12]
 8003936:	6643      	str	r3, [r0, #100]	; 0x64
 8003938:	81c2      	strh	r2, [r0, #14]
 800393a:	6183      	str	r3, [r0, #24]
 800393c:	4619      	mov	r1, r3
 800393e:	2208      	movs	r2, #8
 8003940:	305c      	adds	r0, #92	; 0x5c
 8003942:	f000 fa05 	bl	8003d50 <memset>
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <std+0x58>)
 8003948:	6224      	str	r4, [r4, #32]
 800394a:	6263      	str	r3, [r4, #36]	; 0x24
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <std+0x5c>)
 800394e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <std+0x60>)
 8003952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <std+0x64>)
 8003956:	6323      	str	r3, [r4, #48]	; 0x30
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <std+0x68>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d006      	beq.n	800396c <std+0x48>
 800395e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003962:	4294      	cmp	r4, r2
 8003964:	d002      	beq.n	800396c <std+0x48>
 8003966:	33d0      	adds	r3, #208	; 0xd0
 8003968:	429c      	cmp	r4, r3
 800396a:	d105      	bne.n	8003978 <std+0x54>
 800396c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003974:	f000 ba64 	b.w	8003e40 <__retarget_lock_init_recursive>
 8003978:	bd10      	pop	{r4, pc}
 800397a:	bf00      	nop
 800397c:	08003ba1 	.word	0x08003ba1
 8003980:	08003bc3 	.word	0x08003bc3
 8003984:	08003bfb 	.word	0x08003bfb
 8003988:	08003c1f 	.word	0x08003c1f
 800398c:	200018fc 	.word	0x200018fc

08003990 <stdio_exit_handler>:
 8003990:	4a02      	ldr	r2, [pc, #8]	; (800399c <stdio_exit_handler+0xc>)
 8003992:	4903      	ldr	r1, [pc, #12]	; (80039a0 <stdio_exit_handler+0x10>)
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <stdio_exit_handler+0x14>)
 8003996:	f000 b869 	b.w	8003a6c <_fwalk_sglue>
 800399a:	bf00      	nop
 800399c:	200017b8 	.word	0x200017b8
 80039a0:	0800470d 	.word	0x0800470d
 80039a4:	200017c4 	.word	0x200017c4

080039a8 <cleanup_stdio>:
 80039a8:	6841      	ldr	r1, [r0, #4]
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <cleanup_stdio+0x34>)
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4299      	cmp	r1, r3
 80039b0:	4604      	mov	r4, r0
 80039b2:	d001      	beq.n	80039b8 <cleanup_stdio+0x10>
 80039b4:	f000 feaa 	bl	800470c <_fflush_r>
 80039b8:	68a1      	ldr	r1, [r4, #8]
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <cleanup_stdio+0x38>)
 80039bc:	4299      	cmp	r1, r3
 80039be:	d002      	beq.n	80039c6 <cleanup_stdio+0x1e>
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 fea3 	bl	800470c <_fflush_r>
 80039c6:	68e1      	ldr	r1, [r4, #12]
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <cleanup_stdio+0x3c>)
 80039ca:	4299      	cmp	r1, r3
 80039cc:	d004      	beq.n	80039d8 <cleanup_stdio+0x30>
 80039ce:	4620      	mov	r0, r4
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d4:	f000 be9a 	b.w	800470c <_fflush_r>
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop
 80039dc:	200018fc 	.word	0x200018fc
 80039e0:	20001964 	.word	0x20001964
 80039e4:	200019cc 	.word	0x200019cc

080039e8 <global_stdio_init.part.0>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <global_stdio_init.part.0+0x30>)
 80039ec:	4c0b      	ldr	r4, [pc, #44]	; (8003a1c <global_stdio_init.part.0+0x34>)
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <global_stdio_init.part.0+0x38>)
 80039f0:	4620      	mov	r0, r4
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	2104      	movs	r1, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	f7ff ff94 	bl	8003924 <std>
 80039fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a00:	2201      	movs	r2, #1
 8003a02:	2109      	movs	r1, #9
 8003a04:	f7ff ff8e 	bl	8003924 <std>
 8003a08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a12:	2112      	movs	r1, #18
 8003a14:	f7ff bf86 	b.w	8003924 <std>
 8003a18:	20001a34 	.word	0x20001a34
 8003a1c:	200018fc 	.word	0x200018fc
 8003a20:	08003991 	.word	0x08003991

08003a24 <__sfp_lock_acquire>:
 8003a24:	4801      	ldr	r0, [pc, #4]	; (8003a2c <__sfp_lock_acquire+0x8>)
 8003a26:	f000 ba0c 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	20001a3d 	.word	0x20001a3d

08003a30 <__sfp_lock_release>:
 8003a30:	4801      	ldr	r0, [pc, #4]	; (8003a38 <__sfp_lock_release+0x8>)
 8003a32:	f000 ba07 	b.w	8003e44 <__retarget_lock_release_recursive>
 8003a36:	bf00      	nop
 8003a38:	20001a3d 	.word	0x20001a3d

08003a3c <__sinit>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
 8003a40:	f7ff fff0 	bl	8003a24 <__sfp_lock_acquire>
 8003a44:	6a23      	ldr	r3, [r4, #32]
 8003a46:	b11b      	cbz	r3, 8003a50 <__sinit+0x14>
 8003a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a4c:	f7ff bff0 	b.w	8003a30 <__sfp_lock_release>
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <__sinit+0x28>)
 8003a52:	6223      	str	r3, [r4, #32]
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <__sinit+0x2c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f5      	bne.n	8003a48 <__sinit+0xc>
 8003a5c:	f7ff ffc4 	bl	80039e8 <global_stdio_init.part.0>
 8003a60:	e7f2      	b.n	8003a48 <__sinit+0xc>
 8003a62:	bf00      	nop
 8003a64:	080039a9 	.word	0x080039a9
 8003a68:	20001a34 	.word	0x20001a34

08003a6c <_fwalk_sglue>:
 8003a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a70:	4607      	mov	r7, r0
 8003a72:	4688      	mov	r8, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	2600      	movs	r6, #0
 8003a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a80:	d505      	bpl.n	8003a8e <_fwalk_sglue+0x22>
 8003a82:	6824      	ldr	r4, [r4, #0]
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	d1f7      	bne.n	8003a78 <_fwalk_sglue+0xc>
 8003a88:	4630      	mov	r0, r6
 8003a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8e:	89ab      	ldrh	r3, [r5, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d907      	bls.n	8003aa4 <_fwalk_sglue+0x38>
 8003a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	d003      	beq.n	8003aa4 <_fwalk_sglue+0x38>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	47c0      	blx	r8
 8003aa2:	4306      	orrs	r6, r0
 8003aa4:	3568      	adds	r5, #104	; 0x68
 8003aa6:	e7e9      	b.n	8003a7c <_fwalk_sglue+0x10>

08003aa8 <_puts_r>:
 8003aa8:	6a03      	ldr	r3, [r0, #32]
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	4605      	mov	r5, r0
 8003aae:	460e      	mov	r6, r1
 8003ab0:	6884      	ldr	r4, [r0, #8]
 8003ab2:	b90b      	cbnz	r3, 8003ab8 <_puts_r+0x10>
 8003ab4:	f7ff ffc2 	bl	8003a3c <__sinit>
 8003ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aba:	07db      	lsls	r3, r3, #31
 8003abc:	d405      	bmi.n	8003aca <_puts_r+0x22>
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	0598      	lsls	r0, r3, #22
 8003ac2:	d402      	bmi.n	8003aca <_puts_r+0x22>
 8003ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac6:	f000 f9bc 	bl	8003e42 <__retarget_lock_acquire_recursive>
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	0719      	lsls	r1, r3, #28
 8003ace:	d513      	bpl.n	8003af8 <_puts_r+0x50>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	b18b      	cbz	r3, 8003af8 <_puts_r+0x50>
 8003ad4:	3e01      	subs	r6, #1
 8003ad6:	68a3      	ldr	r3, [r4, #8]
 8003ad8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60a3      	str	r3, [r4, #8]
 8003ae0:	b9e9      	cbnz	r1, 8003b1e <_puts_r+0x76>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da2e      	bge.n	8003b44 <_puts_r+0x9c>
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	210a      	movs	r1, #10
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 f89b 	bl	8003c26 <__swbuf_r>
 8003af0:	3001      	adds	r0, #1
 8003af2:	d007      	beq.n	8003b04 <_puts_r+0x5c>
 8003af4:	250a      	movs	r5, #10
 8003af6:	e007      	b.n	8003b08 <_puts_r+0x60>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 f8d0 	bl	8003ca0 <__swsetup_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d0e7      	beq.n	8003ad4 <_puts_r+0x2c>
 8003b04:	f04f 35ff 	mov.w	r5, #4294967295
 8003b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b0a:	07da      	lsls	r2, r3, #31
 8003b0c:	d405      	bmi.n	8003b1a <_puts_r+0x72>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	059b      	lsls	r3, r3, #22
 8003b12:	d402      	bmi.n	8003b1a <_puts_r+0x72>
 8003b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b16:	f000 f995 	bl	8003e44 <__retarget_lock_release_recursive>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da04      	bge.n	8003b2c <_puts_r+0x84>
 8003b22:	69a2      	ldr	r2, [r4, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dc06      	bgt.n	8003b36 <_puts_r+0x8e>
 8003b28:	290a      	cmp	r1, #10
 8003b2a:	d004      	beq.n	8003b36 <_puts_r+0x8e>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	6022      	str	r2, [r4, #0]
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	e7cf      	b.n	8003ad6 <_puts_r+0x2e>
 8003b36:	4622      	mov	r2, r4
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f000 f874 	bl	8003c26 <__swbuf_r>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d1c9      	bne.n	8003ad6 <_puts_r+0x2e>
 8003b42:	e7df      	b.n	8003b04 <_puts_r+0x5c>
 8003b44:	250a      	movs	r5, #10
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	6022      	str	r2, [r4, #0]
 8003b4c:	701d      	strb	r5, [r3, #0]
 8003b4e:	e7db      	b.n	8003b08 <_puts_r+0x60>

08003b50 <puts>:
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <puts+0xc>)
 8003b52:	4601      	mov	r1, r0
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f7ff bfa7 	b.w	8003aa8 <_puts_r>
 8003b5a:	bf00      	nop
 8003b5c:	20001810 	.word	0x20001810

08003b60 <siprintf>:
 8003b60:	b40e      	push	{r1, r2, r3}
 8003b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b66:	b500      	push	{lr}
 8003b68:	b09c      	sub	sp, #112	; 0x70
 8003b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b6c:	9002      	str	r0, [sp, #8]
 8003b6e:	9006      	str	r0, [sp, #24]
 8003b70:	9107      	str	r1, [sp, #28]
 8003b72:	9104      	str	r1, [sp, #16]
 8003b74:	4808      	ldr	r0, [pc, #32]	; (8003b98 <siprintf+0x38>)
 8003b76:	4909      	ldr	r1, [pc, #36]	; (8003b9c <siprintf+0x3c>)
 8003b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b7c:	9105      	str	r1, [sp, #20]
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	a902      	add	r1, sp, #8
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	f000 faae 	bl	80040e4 <_svfiprintf_r>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	9b02      	ldr	r3, [sp, #8]
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	b01c      	add	sp, #112	; 0x70
 8003b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b94:	b003      	add	sp, #12
 8003b96:	4770      	bx	lr
 8003b98:	20001810 	.word	0x20001810
 8003b9c:	ffff0208 	.word	0xffff0208

08003ba0 <__sread>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	f000 f8fc 	bl	8003da4 <_read_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	bfab      	itete	ge
 8003bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003bb4:	181b      	addge	r3, r3, r0
 8003bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bba:	bfac      	ite	ge
 8003bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bbe:	81a3      	strhlt	r3, [r4, #12]
 8003bc0:	bd10      	pop	{r4, pc}

08003bc2 <__swrite>:
 8003bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	898b      	ldrh	r3, [r1, #12]
 8003bca:	4605      	mov	r5, r0
 8003bcc:	05db      	lsls	r3, r3, #23
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	d505      	bpl.n	8003be0 <__swrite+0x1e>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	f000 f8d0 	bl	8003d80 <_lseek_r>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	4632      	mov	r2, r6
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	4628      	mov	r0, r5
 8003bec:	463b      	mov	r3, r7
 8003bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	f000 b8e7 	b.w	8003dc8 <_write_r>

08003bfa <__sseek>:
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c02:	f000 f8bd 	bl	8003d80 <_lseek_r>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	bf15      	itete	ne
 8003c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c16:	81a3      	strheq	r3, [r4, #12]
 8003c18:	bf18      	it	ne
 8003c1a:	81a3      	strhne	r3, [r4, #12]
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <__sclose>:
 8003c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c22:	f000 b89d 	b.w	8003d60 <_close_r>

08003c26 <__swbuf_r>:
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c28:	460e      	mov	r6, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b118      	cbz	r0, 8003c38 <__swbuf_r+0x12>
 8003c30:	6a03      	ldr	r3, [r0, #32]
 8003c32:	b90b      	cbnz	r3, 8003c38 <__swbuf_r+0x12>
 8003c34:	f7ff ff02 	bl	8003a3c <__sinit>
 8003c38:	69a3      	ldr	r3, [r4, #24]
 8003c3a:	60a3      	str	r3, [r4, #8]
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	071a      	lsls	r2, r3, #28
 8003c40:	d525      	bpl.n	8003c8e <__swbuf_r+0x68>
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	b31b      	cbz	r3, 8003c8e <__swbuf_r+0x68>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	6922      	ldr	r2, [r4, #16]
 8003c4a:	b2f6      	uxtb	r6, r6
 8003c4c:	1a98      	subs	r0, r3, r2
 8003c4e:	6963      	ldr	r3, [r4, #20]
 8003c50:	4637      	mov	r7, r6
 8003c52:	4283      	cmp	r3, r0
 8003c54:	dc04      	bgt.n	8003c60 <__swbuf_r+0x3a>
 8003c56:	4621      	mov	r1, r4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 fd57 	bl	800470c <_fflush_r>
 8003c5e:	b9e0      	cbnz	r0, 8003c9a <__swbuf_r+0x74>
 8003c60:	68a3      	ldr	r3, [r4, #8]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	6022      	str	r2, [r4, #0]
 8003c6c:	701e      	strb	r6, [r3, #0]
 8003c6e:	6962      	ldr	r2, [r4, #20]
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d004      	beq.n	8003c80 <__swbuf_r+0x5a>
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	07db      	lsls	r3, r3, #31
 8003c7a:	d506      	bpl.n	8003c8a <__swbuf_r+0x64>
 8003c7c:	2e0a      	cmp	r6, #10
 8003c7e:	d104      	bne.n	8003c8a <__swbuf_r+0x64>
 8003c80:	4621      	mov	r1, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 fd42 	bl	800470c <_fflush_r>
 8003c88:	b938      	cbnz	r0, 8003c9a <__swbuf_r+0x74>
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8e:	4621      	mov	r1, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	f000 f805 	bl	8003ca0 <__swsetup_r>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d0d5      	beq.n	8003c46 <__swbuf_r+0x20>
 8003c9a:	f04f 37ff 	mov.w	r7, #4294967295
 8003c9e:	e7f4      	b.n	8003c8a <__swbuf_r+0x64>

08003ca0 <__swsetup_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <__swsetup_r+0xac>)
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	460c      	mov	r4, r1
 8003caa:	b118      	cbz	r0, 8003cb4 <__swsetup_r+0x14>
 8003cac:	6a03      	ldr	r3, [r0, #32]
 8003cae:	b90b      	cbnz	r3, 8003cb4 <__swsetup_r+0x14>
 8003cb0:	f7ff fec4 	bl	8003a3c <__sinit>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cba:	0718      	lsls	r0, r3, #28
 8003cbc:	d422      	bmi.n	8003d04 <__swsetup_r+0x64>
 8003cbe:	06d9      	lsls	r1, r3, #27
 8003cc0:	d407      	bmi.n	8003cd2 <__swsetup_r+0x32>
 8003cc2:	2309      	movs	r3, #9
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	e034      	b.n	8003d3c <__swsetup_r+0x9c>
 8003cd2:	0758      	lsls	r0, r3, #29
 8003cd4:	d512      	bpl.n	8003cfc <__swsetup_r+0x5c>
 8003cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cd8:	b141      	cbz	r1, 8003cec <__swsetup_r+0x4c>
 8003cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	d002      	beq.n	8003ce8 <__swsetup_r+0x48>
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f8b0 	bl	8003e48 <_free_r>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6363      	str	r3, [r4, #52]	; 0x34
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f043 0308 	orr.w	r3, r3, #8
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	b94b      	cbnz	r3, 8003d1c <__swsetup_r+0x7c>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d12:	d003      	beq.n	8003d1c <__swsetup_r+0x7c>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 fd45 	bl	80047a6 <__smakebuf_r>
 8003d1c:	89a0      	ldrh	r0, [r4, #12]
 8003d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d22:	f010 0301 	ands.w	r3, r0, #1
 8003d26:	d00a      	beq.n	8003d3e <__swsetup_r+0x9e>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	6963      	ldr	r3, [r4, #20]
 8003d2e:	425b      	negs	r3, r3
 8003d30:	61a3      	str	r3, [r4, #24]
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	b943      	cbnz	r3, 8003d48 <__swsetup_r+0xa8>
 8003d36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d3a:	d1c4      	bne.n	8003cc6 <__swsetup_r+0x26>
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	0781      	lsls	r1, r0, #30
 8003d40:	bf58      	it	pl
 8003d42:	6963      	ldrpl	r3, [r4, #20]
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	e7f4      	b.n	8003d32 <__swsetup_r+0x92>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7f7      	b.n	8003d3c <__swsetup_r+0x9c>
 8003d4c:	20001810 	.word	0x20001810

08003d50 <memset>:
 8003d50:	4603      	mov	r3, r0
 8003d52:	4402      	add	r2, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <_close_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d05      	ldr	r5, [pc, #20]	; (8003d7c <_close_r+0x1c>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fe f9dc 	bl	8002128 <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_close_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_close_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20001a38 	.word	0x20001a38

08003d80 <_lseek_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4d05      	ldr	r5, [pc, #20]	; (8003da0 <_lseek_r+0x20>)
 8003d8c:	602a      	str	r2, [r5, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7fe f9ee 	bl	8002170 <_lseek>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_lseek_r+0x1e>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_lseek_r+0x1e>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	20001a38 	.word	0x20001a38

08003da4 <_read_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	2200      	movs	r2, #0
 8003dae:	4d05      	ldr	r5, [pc, #20]	; (8003dc4 <_read_r+0x20>)
 8003db0:	602a      	str	r2, [r5, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7fe f97f 	bl	80020b6 <_read>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_read_r+0x1e>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_read_r+0x1e>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20001a38 	.word	0x20001a38

08003dc8 <_write_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4d05      	ldr	r5, [pc, #20]	; (8003de8 <_write_r+0x20>)
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fe f98a 	bl	80020f0 <_write>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_write_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_write_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	20001a38 	.word	0x20001a38

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20001810 	.word	0x20001810

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4d0c      	ldr	r5, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	f000 fdaa 	bl	8004960 <_init>
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	4d0a      	ldr	r5, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08004be4 	.word	0x08004be4
 8003e34:	08004be4 	.word	0x08004be4
 8003e38:	08004be4 	.word	0x08004be4
 8003e3c:	08004be8 	.word	0x08004be8

08003e40 <__retarget_lock_init_recursive>:
 8003e40:	4770      	bx	lr

08003e42 <__retarget_lock_acquire_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <__retarget_lock_release_recursive>:
 8003e44:	4770      	bx	lr
	...

08003e48 <_free_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d040      	beq.n	8003ed2 <_free_r+0x8a>
 8003e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e54:	1f0c      	subs	r4, r1, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	18e4      	addlt	r4, r4, r3
 8003e5c:	f000 f8dc 	bl	8004018 <__malloc_lock>
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <_free_r+0x8c>)
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	b933      	cbnz	r3, 8003e74 <_free_r+0x2c>
 8003e66:	6063      	str	r3, [r4, #4]
 8003e68:	6014      	str	r4, [r2, #0]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e70:	f000 b8d8 	b.w	8004024 <__malloc_unlock>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d908      	bls.n	8003e8a <_free_r+0x42>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	1821      	adds	r1, r4, r0
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf01      	itttt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	1809      	addeq	r1, r1, r0
 8003e86:	6021      	streq	r1, [r4, #0]
 8003e88:	e7ed      	b.n	8003e66 <_free_r+0x1e>
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b10b      	cbz	r3, 8003e94 <_free_r+0x4c>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d9fa      	bls.n	8003e8a <_free_r+0x42>
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	1850      	adds	r0, r2, r1
 8003e98:	42a0      	cmp	r0, r4
 8003e9a:	d10b      	bne.n	8003eb4 <_free_r+0x6c>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	4401      	add	r1, r0
 8003ea0:	1850      	adds	r0, r2, r1
 8003ea2:	4283      	cmp	r3, r0
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	d1e0      	bne.n	8003e6a <_free_r+0x22>
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4408      	add	r0, r1
 8003eae:	6010      	str	r0, [r2, #0]
 8003eb0:	6053      	str	r3, [r2, #4]
 8003eb2:	e7da      	b.n	8003e6a <_free_r+0x22>
 8003eb4:	d902      	bls.n	8003ebc <_free_r+0x74>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	602b      	str	r3, [r5, #0]
 8003eba:	e7d6      	b.n	8003e6a <_free_r+0x22>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	1821      	adds	r1, r4, r0
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	bf01      	itttt	eq
 8003ec4:	6819      	ldreq	r1, [r3, #0]
 8003ec6:	685b      	ldreq	r3, [r3, #4]
 8003ec8:	1809      	addeq	r1, r1, r0
 8003eca:	6021      	streq	r1, [r4, #0]
 8003ecc:	6063      	str	r3, [r4, #4]
 8003ece:	6054      	str	r4, [r2, #4]
 8003ed0:	e7cb      	b.n	8003e6a <_free_r+0x22>
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20001a40 	.word	0x20001a40

08003ed8 <sbrk_aligned>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	4e0e      	ldr	r6, [pc, #56]	; (8003f14 <sbrk_aligned+0x3c>)
 8003edc:	460c      	mov	r4, r1
 8003ede:	6831      	ldr	r1, [r6, #0]
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b911      	cbnz	r1, 8003eea <sbrk_aligned+0x12>
 8003ee4:	f000 fcd8 	bl	8004898 <_sbrk_r>
 8003ee8:	6030      	str	r0, [r6, #0]
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 fcd3 	bl	8004898 <_sbrk_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d00a      	beq.n	8003f0c <sbrk_aligned+0x34>
 8003ef6:	1cc4      	adds	r4, r0, #3
 8003ef8:	f024 0403 	bic.w	r4, r4, #3
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	d007      	beq.n	8003f10 <sbrk_aligned+0x38>
 8003f00:	1a21      	subs	r1, r4, r0
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 fcc8 	bl	8004898 <_sbrk_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d101      	bne.n	8003f10 <sbrk_aligned+0x38>
 8003f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f10:	4620      	mov	r0, r4
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	20001a44 	.word	0x20001a44

08003f18 <_malloc_r>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	1ccd      	adds	r5, r1, #3
 8003f1e:	f025 0503 	bic.w	r5, r5, #3
 8003f22:	3508      	adds	r5, #8
 8003f24:	2d0c      	cmp	r5, #12
 8003f26:	bf38      	it	cc
 8003f28:	250c      	movcc	r5, #12
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	db01      	blt.n	8003f34 <_malloc_r+0x1c>
 8003f30:	42a9      	cmp	r1, r5
 8003f32:	d905      	bls.n	8003f40 <_malloc_r+0x28>
 8003f34:	230c      	movs	r3, #12
 8003f36:	2600      	movs	r6, #0
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004014 <_malloc_r+0xfc>
 8003f44:	f000 f868 	bl	8004018 <__malloc_lock>
 8003f48:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	bb5c      	cbnz	r4, 8003fa8 <_malloc_r+0x90>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4638      	mov	r0, r7
 8003f54:	f7ff ffc0 	bl	8003ed8 <sbrk_aligned>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	d155      	bne.n	800400a <_malloc_r+0xf2>
 8003f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8003f62:	4626      	mov	r6, r4
 8003f64:	2e00      	cmp	r6, #0
 8003f66:	d145      	bne.n	8003ff4 <_malloc_r+0xdc>
 8003f68:	2c00      	cmp	r4, #0
 8003f6a:	d048      	beq.n	8003ffe <_malloc_r+0xe6>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4638      	mov	r0, r7
 8003f72:	eb04 0903 	add.w	r9, r4, r3
 8003f76:	f000 fc8f 	bl	8004898 <_sbrk_r>
 8003f7a:	4581      	cmp	r9, r0
 8003f7c:	d13f      	bne.n	8003ffe <_malloc_r+0xe6>
 8003f7e:	6821      	ldr	r1, [r4, #0]
 8003f80:	4638      	mov	r0, r7
 8003f82:	1a6d      	subs	r5, r5, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7ff ffa7 	bl	8003ed8 <sbrk_aligned>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d037      	beq.n	8003ffe <_malloc_r+0xe6>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	442b      	add	r3, r5
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	f8d8 3000 	ldr.w	r3, [r8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d038      	beq.n	800400e <_malloc_r+0xf6>
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	42a2      	cmp	r2, r4
 8003fa0:	d12b      	bne.n	8003ffa <_malloc_r+0xe2>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e00f      	b.n	8003fc8 <_malloc_r+0xb0>
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	1b52      	subs	r2, r2, r5
 8003fac:	d41f      	bmi.n	8003fee <_malloc_r+0xd6>
 8003fae:	2a0b      	cmp	r2, #11
 8003fb0:	d917      	bls.n	8003fe2 <_malloc_r+0xca>
 8003fb2:	1961      	adds	r1, r4, r5
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	6025      	str	r5, [r4, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	6059      	strne	r1, [r3, #4]
 8003fbc:	6863      	ldr	r3, [r4, #4]
 8003fbe:	bf08      	it	eq
 8003fc0:	f8c8 1000 	streq.w	r1, [r8]
 8003fc4:	5162      	str	r2, [r4, r5]
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f104 060b 	add.w	r6, r4, #11
 8003fce:	f000 f829 	bl	8004024 <__malloc_unlock>
 8003fd2:	f026 0607 	bic.w	r6, r6, #7
 8003fd6:	1d23      	adds	r3, r4, #4
 8003fd8:	1af2      	subs	r2, r6, r3
 8003fda:	d0ae      	beq.n	8003f3a <_malloc_r+0x22>
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	50a3      	str	r3, [r4, r2]
 8003fe0:	e7ab      	b.n	8003f3a <_malloc_r+0x22>
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	d1dd      	bne.n	8003fa4 <_malloc_r+0x8c>
 8003fe8:	f8c8 2000 	str.w	r2, [r8]
 8003fec:	e7ec      	b.n	8003fc8 <_malloc_r+0xb0>
 8003fee:	4623      	mov	r3, r4
 8003ff0:	6864      	ldr	r4, [r4, #4]
 8003ff2:	e7ac      	b.n	8003f4e <_malloc_r+0x36>
 8003ff4:	4634      	mov	r4, r6
 8003ff6:	6876      	ldr	r6, [r6, #4]
 8003ff8:	e7b4      	b.n	8003f64 <_malloc_r+0x4c>
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	e7cc      	b.n	8003f98 <_malloc_r+0x80>
 8003ffe:	230c      	movs	r3, #12
 8004000:	4638      	mov	r0, r7
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	f000 f80e 	bl	8004024 <__malloc_unlock>
 8004008:	e797      	b.n	8003f3a <_malloc_r+0x22>
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	e7dc      	b.n	8003fc8 <_malloc_r+0xb0>
 800400e:	605b      	str	r3, [r3, #4]
 8004010:	deff      	udf	#255	; 0xff
 8004012:	bf00      	nop
 8004014:	20001a40 	.word	0x20001a40

08004018 <__malloc_lock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_lock+0x8>)
 800401a:	f7ff bf12 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 800401e:	bf00      	nop
 8004020:	20001a3c 	.word	0x20001a3c

08004024 <__malloc_unlock>:
 8004024:	4801      	ldr	r0, [pc, #4]	; (800402c <__malloc_unlock+0x8>)
 8004026:	f7ff bf0d 	b.w	8003e44 <__retarget_lock_release_recursive>
 800402a:	bf00      	nop
 800402c:	20001a3c 	.word	0x20001a3c

08004030 <__ssputs_r>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	461f      	mov	r7, r3
 8004036:	688e      	ldr	r6, [r1, #8]
 8004038:	4682      	mov	sl, r0
 800403a:	42be      	cmp	r6, r7
 800403c:	460c      	mov	r4, r1
 800403e:	4690      	mov	r8, r2
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	d82c      	bhi.n	800409e <__ssputs_r+0x6e>
 8004044:	898a      	ldrh	r2, [r1, #12]
 8004046:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800404a:	d026      	beq.n	800409a <__ssputs_r+0x6a>
 800404c:	6965      	ldr	r5, [r4, #20]
 800404e:	6909      	ldr	r1, [r1, #16]
 8004050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004054:	eba3 0901 	sub.w	r9, r3, r1
 8004058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800405c:	1c7b      	adds	r3, r7, #1
 800405e:	444b      	add	r3, r9
 8004060:	106d      	asrs	r5, r5, #1
 8004062:	429d      	cmp	r5, r3
 8004064:	bf38      	it	cc
 8004066:	461d      	movcc	r5, r3
 8004068:	0553      	lsls	r3, r2, #21
 800406a:	d527      	bpl.n	80040bc <__ssputs_r+0x8c>
 800406c:	4629      	mov	r1, r5
 800406e:	f7ff ff53 	bl	8003f18 <_malloc_r>
 8004072:	4606      	mov	r6, r0
 8004074:	b360      	cbz	r0, 80040d0 <__ssputs_r+0xa0>
 8004076:	464a      	mov	r2, r9
 8004078:	6921      	ldr	r1, [r4, #16]
 800407a:	f000 fc2b 	bl	80048d4 <memcpy>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	6126      	str	r6, [r4, #16]
 800408c:	444e      	add	r6, r9
 800408e:	6026      	str	r6, [r4, #0]
 8004090:	463e      	mov	r6, r7
 8004092:	6165      	str	r5, [r4, #20]
 8004094:	eba5 0509 	sub.w	r5, r5, r9
 8004098:	60a5      	str	r5, [r4, #8]
 800409a:	42be      	cmp	r6, r7
 800409c:	d900      	bls.n	80040a0 <__ssputs_r+0x70>
 800409e:	463e      	mov	r6, r7
 80040a0:	4632      	mov	r2, r6
 80040a2:	4641      	mov	r1, r8
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	f000 fbba 	bl	800481e <memmove>
 80040aa:	2000      	movs	r0, #0
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	1b9b      	subs	r3, r3, r6
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	4433      	add	r3, r6
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	462a      	mov	r2, r5
 80040be:	f000 fc17 	bl	80048f0 <_realloc_r>
 80040c2:	4606      	mov	r6, r0
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d1e0      	bne.n	800408a <__ssputs_r+0x5a>
 80040c8:	4650      	mov	r0, sl
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	f7ff febc 	bl	8003e48 <_free_r>
 80040d0:	230c      	movs	r3, #12
 80040d2:	f8ca 3000 	str.w	r3, [sl]
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	e7e9      	b.n	80040b8 <__ssputs_r+0x88>

080040e4 <_svfiprintf_r>:
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	4698      	mov	r8, r3
 80040ea:	898b      	ldrh	r3, [r1, #12]
 80040ec:	4607      	mov	r7, r0
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	460d      	mov	r5, r1
 80040f2:	4614      	mov	r4, r2
 80040f4:	b09d      	sub	sp, #116	; 0x74
 80040f6:	d50e      	bpl.n	8004116 <_svfiprintf_r+0x32>
 80040f8:	690b      	ldr	r3, [r1, #16]
 80040fa:	b963      	cbnz	r3, 8004116 <_svfiprintf_r+0x32>
 80040fc:	2140      	movs	r1, #64	; 0x40
 80040fe:	f7ff ff0b 	bl	8003f18 <_malloc_r>
 8004102:	6028      	str	r0, [r5, #0]
 8004104:	6128      	str	r0, [r5, #16]
 8004106:	b920      	cbnz	r0, 8004112 <_svfiprintf_r+0x2e>
 8004108:	230c      	movs	r3, #12
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e0d0      	b.n	80042b4 <_svfiprintf_r+0x1d0>
 8004112:	2340      	movs	r3, #64	; 0x40
 8004114:	616b      	str	r3, [r5, #20]
 8004116:	2300      	movs	r3, #0
 8004118:	9309      	str	r3, [sp, #36]	; 0x24
 800411a:	2320      	movs	r3, #32
 800411c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004120:	2330      	movs	r3, #48	; 0x30
 8004122:	f04f 0901 	mov.w	r9, #1
 8004126:	f8cd 800c 	str.w	r8, [sp, #12]
 800412a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80042cc <_svfiprintf_r+0x1e8>
 800412e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004132:	4623      	mov	r3, r4
 8004134:	469a      	mov	sl, r3
 8004136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413a:	b10a      	cbz	r2, 8004140 <_svfiprintf_r+0x5c>
 800413c:	2a25      	cmp	r2, #37	; 0x25
 800413e:	d1f9      	bne.n	8004134 <_svfiprintf_r+0x50>
 8004140:	ebba 0b04 	subs.w	fp, sl, r4
 8004144:	d00b      	beq.n	800415e <_svfiprintf_r+0x7a>
 8004146:	465b      	mov	r3, fp
 8004148:	4622      	mov	r2, r4
 800414a:	4629      	mov	r1, r5
 800414c:	4638      	mov	r0, r7
 800414e:	f7ff ff6f 	bl	8004030 <__ssputs_r>
 8004152:	3001      	adds	r0, #1
 8004154:	f000 80a9 	beq.w	80042aa <_svfiprintf_r+0x1c6>
 8004158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800415a:	445a      	add	r2, fp
 800415c:	9209      	str	r2, [sp, #36]	; 0x24
 800415e:	f89a 3000 	ldrb.w	r3, [sl]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80a1 	beq.w	80042aa <_svfiprintf_r+0x1c6>
 8004168:	2300      	movs	r3, #0
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004172:	f10a 0a01 	add.w	sl, sl, #1
 8004176:	9304      	str	r3, [sp, #16]
 8004178:	9307      	str	r3, [sp, #28]
 800417a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800417e:	931a      	str	r3, [sp, #104]	; 0x68
 8004180:	4654      	mov	r4, sl
 8004182:	2205      	movs	r2, #5
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	4850      	ldr	r0, [pc, #320]	; (80042cc <_svfiprintf_r+0x1e8>)
 800418a:	f000 fb95 	bl	80048b8 <memchr>
 800418e:	9a04      	ldr	r2, [sp, #16]
 8004190:	b9d8      	cbnz	r0, 80041ca <_svfiprintf_r+0xe6>
 8004192:	06d0      	lsls	r0, r2, #27
 8004194:	bf44      	itt	mi
 8004196:	2320      	movmi	r3, #32
 8004198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800419c:	0711      	lsls	r1, r2, #28
 800419e:	bf44      	itt	mi
 80041a0:	232b      	movmi	r3, #43	; 0x2b
 80041a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a6:	f89a 3000 	ldrb.w	r3, [sl]
 80041aa:	2b2a      	cmp	r3, #42	; 0x2a
 80041ac:	d015      	beq.n	80041da <_svfiprintf_r+0xf6>
 80041ae:	4654      	mov	r4, sl
 80041b0:	2000      	movs	r0, #0
 80041b2:	f04f 0c0a 	mov.w	ip, #10
 80041b6:	9a07      	ldr	r2, [sp, #28]
 80041b8:	4621      	mov	r1, r4
 80041ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041be:	3b30      	subs	r3, #48	; 0x30
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d94d      	bls.n	8004260 <_svfiprintf_r+0x17c>
 80041c4:	b1b0      	cbz	r0, 80041f4 <_svfiprintf_r+0x110>
 80041c6:	9207      	str	r2, [sp, #28]
 80041c8:	e014      	b.n	80041f4 <_svfiprintf_r+0x110>
 80041ca:	eba0 0308 	sub.w	r3, r0, r8
 80041ce:	fa09 f303 	lsl.w	r3, r9, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	46a2      	mov	sl, r4
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	e7d2      	b.n	8004180 <_svfiprintf_r+0x9c>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	1d19      	adds	r1, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9103      	str	r1, [sp, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfbb      	ittet	lt
 80041e6:	425b      	neglt	r3, r3
 80041e8:	f042 0202 	orrlt.w	r2, r2, #2
 80041ec:	9307      	strge	r3, [sp, #28]
 80041ee:	9307      	strlt	r3, [sp, #28]
 80041f0:	bfb8      	it	lt
 80041f2:	9204      	strlt	r2, [sp, #16]
 80041f4:	7823      	ldrb	r3, [r4, #0]
 80041f6:	2b2e      	cmp	r3, #46	; 0x2e
 80041f8:	d10c      	bne.n	8004214 <_svfiprintf_r+0x130>
 80041fa:	7863      	ldrb	r3, [r4, #1]
 80041fc:	2b2a      	cmp	r3, #42	; 0x2a
 80041fe:	d134      	bne.n	800426a <_svfiprintf_r+0x186>
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	3402      	adds	r4, #2
 8004204:	1d1a      	adds	r2, r3, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	9203      	str	r2, [sp, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80042d0 <_svfiprintf_r+0x1ec>
 8004218:	2203      	movs	r2, #3
 800421a:	4650      	mov	r0, sl
 800421c:	7821      	ldrb	r1, [r4, #0]
 800421e:	f000 fb4b 	bl	80048b8 <memchr>
 8004222:	b138      	cbz	r0, 8004234 <_svfiprintf_r+0x150>
 8004224:	2240      	movs	r2, #64	; 0x40
 8004226:	9b04      	ldr	r3, [sp, #16]
 8004228:	eba0 000a 	sub.w	r0, r0, sl
 800422c:	4082      	lsls	r2, r0
 800422e:	4313      	orrs	r3, r2
 8004230:	3401      	adds	r4, #1
 8004232:	9304      	str	r3, [sp, #16]
 8004234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004238:	2206      	movs	r2, #6
 800423a:	4826      	ldr	r0, [pc, #152]	; (80042d4 <_svfiprintf_r+0x1f0>)
 800423c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004240:	f000 fb3a 	bl	80048b8 <memchr>
 8004244:	2800      	cmp	r0, #0
 8004246:	d038      	beq.n	80042ba <_svfiprintf_r+0x1d6>
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <_svfiprintf_r+0x1f4>)
 800424a:	bb1b      	cbnz	r3, 8004294 <_svfiprintf_r+0x1b0>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	3307      	adds	r3, #7
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	3308      	adds	r3, #8
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425a:	4433      	add	r3, r6
 800425c:	9309      	str	r3, [sp, #36]	; 0x24
 800425e:	e768      	b.n	8004132 <_svfiprintf_r+0x4e>
 8004260:	460c      	mov	r4, r1
 8004262:	2001      	movs	r0, #1
 8004264:	fb0c 3202 	mla	r2, ip, r2, r3
 8004268:	e7a6      	b.n	80041b8 <_svfiprintf_r+0xd4>
 800426a:	2300      	movs	r3, #0
 800426c:	f04f 0c0a 	mov.w	ip, #10
 8004270:	4619      	mov	r1, r3
 8004272:	3401      	adds	r4, #1
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	4620      	mov	r0, r4
 8004278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800427c:	3a30      	subs	r2, #48	; 0x30
 800427e:	2a09      	cmp	r2, #9
 8004280:	d903      	bls.n	800428a <_svfiprintf_r+0x1a6>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0c6      	beq.n	8004214 <_svfiprintf_r+0x130>
 8004286:	9105      	str	r1, [sp, #20]
 8004288:	e7c4      	b.n	8004214 <_svfiprintf_r+0x130>
 800428a:	4604      	mov	r4, r0
 800428c:	2301      	movs	r3, #1
 800428e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004292:	e7f0      	b.n	8004276 <_svfiprintf_r+0x192>
 8004294:	ab03      	add	r3, sp, #12
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	462a      	mov	r2, r5
 800429a:	4638      	mov	r0, r7
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <_svfiprintf_r+0x1f8>)
 800429e:	a904      	add	r1, sp, #16
 80042a0:	f3af 8000 	nop.w
 80042a4:	1c42      	adds	r2, r0, #1
 80042a6:	4606      	mov	r6, r0
 80042a8:	d1d6      	bne.n	8004258 <_svfiprintf_r+0x174>
 80042aa:	89ab      	ldrh	r3, [r5, #12]
 80042ac:	065b      	lsls	r3, r3, #25
 80042ae:	f53f af2d 	bmi.w	800410c <_svfiprintf_r+0x28>
 80042b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	ab03      	add	r3, sp, #12
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	462a      	mov	r2, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <_svfiprintf_r+0x1f8>)
 80042c4:	a904      	add	r1, sp, #16
 80042c6:	f000 f87d 	bl	80043c4 <_printf_i>
 80042ca:	e7eb      	b.n	80042a4 <_svfiprintf_r+0x1c0>
 80042cc:	08004bae 	.word	0x08004bae
 80042d0:	08004bb4 	.word	0x08004bb4
 80042d4:	08004bb8 	.word	0x08004bb8
 80042d8:	00000000 	.word	0x00000000
 80042dc:	08004031 	.word	0x08004031

080042e0 <_printf_common>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	4616      	mov	r6, r2
 80042e6:	4699      	mov	r9, r3
 80042e8:	688a      	ldr	r2, [r1, #8]
 80042ea:	690b      	ldr	r3, [r1, #16]
 80042ec:	4607      	mov	r7, r0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfb8      	it	lt
 80042f2:	4613      	movlt	r3, r2
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042fa:	460c      	mov	r4, r1
 80042fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004300:	b10a      	cbz	r2, 8004306 <_printf_common+0x26>
 8004302:	3301      	adds	r3, #1
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	0699      	lsls	r1, r3, #26
 800430a:	bf42      	ittt	mi
 800430c:	6833      	ldrmi	r3, [r6, #0]
 800430e:	3302      	addmi	r3, #2
 8004310:	6033      	strmi	r3, [r6, #0]
 8004312:	6825      	ldr	r5, [r4, #0]
 8004314:	f015 0506 	ands.w	r5, r5, #6
 8004318:	d106      	bne.n	8004328 <_printf_common+0x48>
 800431a:	f104 0a19 	add.w	sl, r4, #25
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	6832      	ldr	r2, [r6, #0]
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	42ab      	cmp	r3, r5
 8004326:	dc2b      	bgt.n	8004380 <_printf_common+0xa0>
 8004328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800432c:	1e13      	subs	r3, r2, #0
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	bf18      	it	ne
 8004332:	2301      	movne	r3, #1
 8004334:	0692      	lsls	r2, r2, #26
 8004336:	d430      	bmi.n	800439a <_printf_common+0xba>
 8004338:	4649      	mov	r1, r9
 800433a:	4638      	mov	r0, r7
 800433c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004340:	47c0      	blx	r8
 8004342:	3001      	adds	r0, #1
 8004344:	d023      	beq.n	800438e <_printf_common+0xae>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	6922      	ldr	r2, [r4, #16]
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf14      	ite	ne
 8004352:	2500      	movne	r5, #0
 8004354:	6833      	ldreq	r3, [r6, #0]
 8004356:	f04f 0600 	mov.w	r6, #0
 800435a:	bf08      	it	eq
 800435c:	68e5      	ldreq	r5, [r4, #12]
 800435e:	f104 041a 	add.w	r4, r4, #26
 8004362:	bf08      	it	eq
 8004364:	1aed      	subeq	r5, r5, r3
 8004366:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800436a:	bf08      	it	eq
 800436c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004370:	4293      	cmp	r3, r2
 8004372:	bfc4      	itt	gt
 8004374:	1a9b      	subgt	r3, r3, r2
 8004376:	18ed      	addgt	r5, r5, r3
 8004378:	42b5      	cmp	r5, r6
 800437a:	d11a      	bne.n	80043b2 <_printf_common+0xd2>
 800437c:	2000      	movs	r0, #0
 800437e:	e008      	b.n	8004392 <_printf_common+0xb2>
 8004380:	2301      	movs	r3, #1
 8004382:	4652      	mov	r2, sl
 8004384:	4649      	mov	r1, r9
 8004386:	4638      	mov	r0, r7
 8004388:	47c0      	blx	r8
 800438a:	3001      	adds	r0, #1
 800438c:	d103      	bne.n	8004396 <_printf_common+0xb6>
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004396:	3501      	adds	r5, #1
 8004398:	e7c1      	b.n	800431e <_printf_common+0x3e>
 800439a:	2030      	movs	r0, #48	; 0x30
 800439c:	18e1      	adds	r1, r4, r3
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	4422      	add	r2, r4
 80043aa:	3302      	adds	r3, #2
 80043ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043b0:	e7c2      	b.n	8004338 <_printf_common+0x58>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4622      	mov	r2, r4
 80043b6:	4649      	mov	r1, r9
 80043b8:	4638      	mov	r0, r7
 80043ba:	47c0      	blx	r8
 80043bc:	3001      	adds	r0, #1
 80043be:	d0e6      	beq.n	800438e <_printf_common+0xae>
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7d9      	b.n	8004378 <_printf_common+0x98>

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	4691      	mov	r9, r2
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4680      	mov	r8, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	469a      	mov	sl, r3
 80043d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d5 	beq.w	8004590 <_printf_i+0x1cc>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80c1 	beq.w	800456e <_printf_i+0x1aa>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	08004577 	.word	0x08004577
 8004434:	0800449d 	.word	0x0800449d
 8004438:	08004531 	.word	0x08004531
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	08004599 	.word	0x08004599
 8004448:	080043ed 	.word	0x080043ed
 800444c:	0800449d 	.word	0x0800449d
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004539 	.word	0x08004539
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a0      	b.n	80045b2 <_printf_i+0x1ee>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	0607      	lsls	r7, r0, #24
 8004476:	f103 0104 	add.w	r1, r3, #4
 800447a:	6029      	str	r1, [r5, #0]
 800447c:	d501      	bpl.n	8004482 <_printf_i+0xbe>
 800447e:	681e      	ldr	r6, [r3, #0]
 8004480:	e003      	b.n	800448a <_printf_i+0xc6>
 8004482:	0646      	lsls	r6, r0, #25
 8004484:	d5fb      	bpl.n	800447e <_printf_i+0xba>
 8004486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800448a:	2e00      	cmp	r6, #0
 800448c:	da03      	bge.n	8004496 <_printf_i+0xd2>
 800448e:	232d      	movs	r3, #45	; 0x2d
 8004490:	4276      	negs	r6, r6
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004496:	230a      	movs	r3, #10
 8004498:	4859      	ldr	r0, [pc, #356]	; (8004600 <_printf_i+0x23c>)
 800449a:	e012      	b.n	80044c2 <_printf_i+0xfe>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	6029      	str	r1, [r5, #0]
 80044a4:	0605      	lsls	r5, r0, #24
 80044a6:	d501      	bpl.n	80044ac <_printf_i+0xe8>
 80044a8:	681e      	ldr	r6, [r3, #0]
 80044aa:	e002      	b.n	80044b2 <_printf_i+0xee>
 80044ac:	0641      	lsls	r1, r0, #25
 80044ae:	d5fb      	bpl.n	80044a8 <_printf_i+0xe4>
 80044b0:	881e      	ldrh	r6, [r3, #0]
 80044b2:	2f6f      	cmp	r7, #111	; 0x6f
 80044b4:	bf0c      	ite	eq
 80044b6:	2308      	moveq	r3, #8
 80044b8:	230a      	movne	r3, #10
 80044ba:	4851      	ldr	r0, [pc, #324]	; (8004600 <_printf_i+0x23c>)
 80044bc:	2100      	movs	r1, #0
 80044be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c2:	6865      	ldr	r5, [r4, #4]
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	bfa8      	it	ge
 80044c8:	6821      	ldrge	r1, [r4, #0]
 80044ca:	60a5      	str	r5, [r4, #8]
 80044cc:	bfa4      	itt	ge
 80044ce:	f021 0104 	bicge.w	r1, r1, #4
 80044d2:	6021      	strge	r1, [r4, #0]
 80044d4:	b90e      	cbnz	r6, 80044da <_printf_i+0x116>
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	d04b      	beq.n	8004572 <_printf_i+0x1ae>
 80044da:	4615      	mov	r5, r2
 80044dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e0:	fb03 6711 	mls	r7, r3, r1, r6
 80044e4:	5dc7      	ldrb	r7, [r0, r7]
 80044e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ea:	4637      	mov	r7, r6
 80044ec:	42bb      	cmp	r3, r7
 80044ee:	460e      	mov	r6, r1
 80044f0:	d9f4      	bls.n	80044dc <_printf_i+0x118>
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d10b      	bne.n	800450e <_printf_i+0x14a>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	07de      	lsls	r6, r3, #31
 80044fa:	d508      	bpl.n	800450e <_printf_i+0x14a>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	6861      	ldr	r1, [r4, #4]
 8004500:	4299      	cmp	r1, r3
 8004502:	bfde      	ittt	le
 8004504:	2330      	movle	r3, #48	; 0x30
 8004506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800450e:	1b52      	subs	r2, r2, r5
 8004510:	6122      	str	r2, [r4, #16]
 8004512:	464b      	mov	r3, r9
 8004514:	4621      	mov	r1, r4
 8004516:	4640      	mov	r0, r8
 8004518:	f8cd a000 	str.w	sl, [sp]
 800451c:	aa03      	add	r2, sp, #12
 800451e:	f7ff fedf 	bl	80042e0 <_printf_common>
 8004522:	3001      	adds	r0, #1
 8004524:	d14a      	bne.n	80045bc <_printf_i+0x1f8>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295
 800452a:	b004      	add	sp, #16
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	f043 0320 	orr.w	r3, r3, #32
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2778      	movs	r7, #120	; 0x78
 800453a:	4832      	ldr	r0, [pc, #200]	; (8004604 <_printf_i+0x240>)
 800453c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	6829      	ldr	r1, [r5, #0]
 8004544:	061f      	lsls	r7, r3, #24
 8004546:	f851 6b04 	ldr.w	r6, [r1], #4
 800454a:	d402      	bmi.n	8004552 <_printf_i+0x18e>
 800454c:	065f      	lsls	r7, r3, #25
 800454e:	bf48      	it	mi
 8004550:	b2b6      	uxthmi	r6, r6
 8004552:	07df      	lsls	r7, r3, #31
 8004554:	bf48      	it	mi
 8004556:	f043 0320 	orrmi.w	r3, r3, #32
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	bf48      	it	mi
 800455e:	6023      	strmi	r3, [r4, #0]
 8004560:	b91e      	cbnz	r6, 800456a <_printf_i+0x1a6>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	f023 0320 	bic.w	r3, r3, #32
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	2310      	movs	r3, #16
 800456c:	e7a6      	b.n	80044bc <_printf_i+0xf8>
 800456e:	4824      	ldr	r0, [pc, #144]	; (8004600 <_printf_i+0x23c>)
 8004570:	e7e4      	b.n	800453c <_printf_i+0x178>
 8004572:	4615      	mov	r5, r2
 8004574:	e7bd      	b.n	80044f2 <_printf_i+0x12e>
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	6826      	ldr	r6, [r4, #0]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	6961      	ldr	r1, [r4, #20]
 800457e:	6028      	str	r0, [r5, #0]
 8004580:	0635      	lsls	r5, r6, #24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	d501      	bpl.n	800458a <_printf_i+0x1c6>
 8004586:	6019      	str	r1, [r3, #0]
 8004588:	e002      	b.n	8004590 <_printf_i+0x1cc>
 800458a:	0670      	lsls	r0, r6, #25
 800458c:	d5fb      	bpl.n	8004586 <_printf_i+0x1c2>
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	4615      	mov	r5, r2
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	e7bc      	b.n	8004512 <_printf_i+0x14e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	2100      	movs	r1, #0
 800459c:	1d1a      	adds	r2, r3, #4
 800459e:	602a      	str	r2, [r5, #0]
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f987 	bl	80048b8 <memchr>
 80045aa:	b108      	cbz	r0, 80045b0 <_printf_i+0x1ec>
 80045ac:	1b40      	subs	r0, r0, r5
 80045ae:	6060      	str	r0, [r4, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ba:	e7aa      	b.n	8004512 <_printf_i+0x14e>
 80045bc:	462a      	mov	r2, r5
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	47d0      	blx	sl
 80045c6:	3001      	adds	r0, #1
 80045c8:	d0ad      	beq.n	8004526 <_printf_i+0x162>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d413      	bmi.n	80045f8 <_printf_i+0x234>
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	4298      	cmp	r0, r3
 80045d6:	bfb8      	it	lt
 80045d8:	4618      	movlt	r0, r3
 80045da:	e7a6      	b.n	800452a <_printf_i+0x166>
 80045dc:	2301      	movs	r3, #1
 80045de:	4632      	mov	r2, r6
 80045e0:	4649      	mov	r1, r9
 80045e2:	4640      	mov	r0, r8
 80045e4:	47d0      	blx	sl
 80045e6:	3001      	adds	r0, #1
 80045e8:	d09d      	beq.n	8004526 <_printf_i+0x162>
 80045ea:	3501      	adds	r5, #1
 80045ec:	68e3      	ldr	r3, [r4, #12]
 80045ee:	9903      	ldr	r1, [sp, #12]
 80045f0:	1a5b      	subs	r3, r3, r1
 80045f2:	42ab      	cmp	r3, r5
 80045f4:	dcf2      	bgt.n	80045dc <_printf_i+0x218>
 80045f6:	e7eb      	b.n	80045d0 <_printf_i+0x20c>
 80045f8:	2500      	movs	r5, #0
 80045fa:	f104 0619 	add.w	r6, r4, #25
 80045fe:	e7f5      	b.n	80045ec <_printf_i+0x228>
 8004600:	08004bbf 	.word	0x08004bbf
 8004604:	08004bd0 	.word	0x08004bd0

08004608 <__sflush_r>:
 8004608:	898a      	ldrh	r2, [r1, #12]
 800460a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460c:	4605      	mov	r5, r0
 800460e:	0710      	lsls	r0, r2, #28
 8004610:	460c      	mov	r4, r1
 8004612:	d457      	bmi.n	80046c4 <__sflush_r+0xbc>
 8004614:	684b      	ldr	r3, [r1, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	dc04      	bgt.n	8004624 <__sflush_r+0x1c>
 800461a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	dc01      	bgt.n	8004624 <__sflush_r+0x1c>
 8004620:	2000      	movs	r0, #0
 8004622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004626:	2e00      	cmp	r6, #0
 8004628:	d0fa      	beq.n	8004620 <__sflush_r+0x18>
 800462a:	2300      	movs	r3, #0
 800462c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004630:	682f      	ldr	r7, [r5, #0]
 8004632:	6a21      	ldr	r1, [r4, #32]
 8004634:	602b      	str	r3, [r5, #0]
 8004636:	d032      	beq.n	800469e <__sflush_r+0x96>
 8004638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	075a      	lsls	r2, r3, #29
 800463e:	d505      	bpl.n	800464c <__sflush_r+0x44>
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	1ac0      	subs	r0, r0, r3
 8004644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004646:	b10b      	cbz	r3, 800464c <__sflush_r+0x44>
 8004648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800464a:	1ac0      	subs	r0, r0, r3
 800464c:	2300      	movs	r3, #0
 800464e:	4602      	mov	r2, r0
 8004650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004652:	4628      	mov	r0, r5
 8004654:	6a21      	ldr	r1, [r4, #32]
 8004656:	47b0      	blx	r6
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	d106      	bne.n	800466c <__sflush_r+0x64>
 800465e:	6829      	ldr	r1, [r5, #0]
 8004660:	291d      	cmp	r1, #29
 8004662:	d82b      	bhi.n	80046bc <__sflush_r+0xb4>
 8004664:	4a28      	ldr	r2, [pc, #160]	; (8004708 <__sflush_r+0x100>)
 8004666:	410a      	asrs	r2, r1
 8004668:	07d6      	lsls	r6, r2, #31
 800466a:	d427      	bmi.n	80046bc <__sflush_r+0xb4>
 800466c:	2200      	movs	r2, #0
 800466e:	6062      	str	r2, [r4, #4]
 8004670:	6922      	ldr	r2, [r4, #16]
 8004672:	04d9      	lsls	r1, r3, #19
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	d504      	bpl.n	8004682 <__sflush_r+0x7a>
 8004678:	1c42      	adds	r2, r0, #1
 800467a:	d101      	bne.n	8004680 <__sflush_r+0x78>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b903      	cbnz	r3, 8004682 <__sflush_r+0x7a>
 8004680:	6560      	str	r0, [r4, #84]	; 0x54
 8004682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004684:	602f      	str	r7, [r5, #0]
 8004686:	2900      	cmp	r1, #0
 8004688:	d0ca      	beq.n	8004620 <__sflush_r+0x18>
 800468a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800468e:	4299      	cmp	r1, r3
 8004690:	d002      	beq.n	8004698 <__sflush_r+0x90>
 8004692:	4628      	mov	r0, r5
 8004694:	f7ff fbd8 	bl	8003e48 <_free_r>
 8004698:	2000      	movs	r0, #0
 800469a:	6360      	str	r0, [r4, #52]	; 0x34
 800469c:	e7c1      	b.n	8004622 <__sflush_r+0x1a>
 800469e:	2301      	movs	r3, #1
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b0      	blx	r6
 80046a4:	1c41      	adds	r1, r0, #1
 80046a6:	d1c8      	bne.n	800463a <__sflush_r+0x32>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0c5      	beq.n	800463a <__sflush_r+0x32>
 80046ae:	2b1d      	cmp	r3, #29
 80046b0:	d001      	beq.n	80046b6 <__sflush_r+0xae>
 80046b2:	2b16      	cmp	r3, #22
 80046b4:	d101      	bne.n	80046ba <__sflush_r+0xb2>
 80046b6:	602f      	str	r7, [r5, #0]
 80046b8:	e7b2      	b.n	8004620 <__sflush_r+0x18>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	e7ae      	b.n	8004622 <__sflush_r+0x1a>
 80046c4:	690f      	ldr	r7, [r1, #16]
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	d0aa      	beq.n	8004620 <__sflush_r+0x18>
 80046ca:	0793      	lsls	r3, r2, #30
 80046cc:	bf18      	it	ne
 80046ce:	2300      	movne	r3, #0
 80046d0:	680e      	ldr	r6, [r1, #0]
 80046d2:	bf08      	it	eq
 80046d4:	694b      	ldreq	r3, [r1, #20]
 80046d6:	1bf6      	subs	r6, r6, r7
 80046d8:	600f      	str	r7, [r1, #0]
 80046da:	608b      	str	r3, [r1, #8]
 80046dc:	2e00      	cmp	r6, #0
 80046de:	dd9f      	ble.n	8004620 <__sflush_r+0x18>
 80046e0:	4633      	mov	r3, r6
 80046e2:	463a      	mov	r2, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	6a21      	ldr	r1, [r4, #32]
 80046e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046ec:	47e0      	blx	ip
 80046ee:	2800      	cmp	r0, #0
 80046f0:	dc06      	bgt.n	8004700 <__sflush_r+0xf8>
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	e790      	b.n	8004622 <__sflush_r+0x1a>
 8004700:	4407      	add	r7, r0
 8004702:	1a36      	subs	r6, r6, r0
 8004704:	e7ea      	b.n	80046dc <__sflush_r+0xd4>
 8004706:	bf00      	nop
 8004708:	dfbffffe 	.word	0xdfbffffe

0800470c <_fflush_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	4605      	mov	r5, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b913      	cbnz	r3, 800471c <_fflush_r+0x10>
 8004716:	2500      	movs	r5, #0
 8004718:	4628      	mov	r0, r5
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	b118      	cbz	r0, 8004726 <_fflush_r+0x1a>
 800471e:	6a03      	ldr	r3, [r0, #32]
 8004720:	b90b      	cbnz	r3, 8004726 <_fflush_r+0x1a>
 8004722:	f7ff f98b 	bl	8003a3c <__sinit>
 8004726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f3      	beq.n	8004716 <_fflush_r+0xa>
 800472e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004730:	07d0      	lsls	r0, r2, #31
 8004732:	d404      	bmi.n	800473e <_fflush_r+0x32>
 8004734:	0599      	lsls	r1, r3, #22
 8004736:	d402      	bmi.n	800473e <_fflush_r+0x32>
 8004738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473a:	f7ff fb82 	bl	8003e42 <__retarget_lock_acquire_recursive>
 800473e:	4628      	mov	r0, r5
 8004740:	4621      	mov	r1, r4
 8004742:	f7ff ff61 	bl	8004608 <__sflush_r>
 8004746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004748:	4605      	mov	r5, r0
 800474a:	07da      	lsls	r2, r3, #31
 800474c:	d4e4      	bmi.n	8004718 <_fflush_r+0xc>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	059b      	lsls	r3, r3, #22
 8004752:	d4e1      	bmi.n	8004718 <_fflush_r+0xc>
 8004754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004756:	f7ff fb75 	bl	8003e44 <__retarget_lock_release_recursive>
 800475a:	e7dd      	b.n	8004718 <_fflush_r+0xc>

0800475c <__swhatbuf_r>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	460c      	mov	r4, r1
 8004760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004764:	4615      	mov	r5, r2
 8004766:	2900      	cmp	r1, #0
 8004768:	461e      	mov	r6, r3
 800476a:	b096      	sub	sp, #88	; 0x58
 800476c:	da0c      	bge.n	8004788 <__swhatbuf_r+0x2c>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	2100      	movs	r1, #0
 8004772:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004776:	bf0c      	ite	eq
 8004778:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800477c:	2340      	movne	r3, #64	; 0x40
 800477e:	2000      	movs	r0, #0
 8004780:	6031      	str	r1, [r6, #0]
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	b016      	add	sp, #88	; 0x58
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	466a      	mov	r2, sp
 800478a:	f000 f863 	bl	8004854 <_fstat_r>
 800478e:	2800      	cmp	r0, #0
 8004790:	dbed      	blt.n	800476e <__swhatbuf_r+0x12>
 8004792:	9901      	ldr	r1, [sp, #4]
 8004794:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004798:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800479c:	4259      	negs	r1, r3
 800479e:	4159      	adcs	r1, r3
 80047a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a4:	e7eb      	b.n	800477e <__swhatbuf_r+0x22>

080047a6 <__smakebuf_r>:
 80047a6:	898b      	ldrh	r3, [r1, #12]
 80047a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047aa:	079d      	lsls	r5, r3, #30
 80047ac:	4606      	mov	r6, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	d507      	bpl.n	80047c2 <__smakebuf_r+0x1c>
 80047b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	2301      	movs	r3, #1
 80047bc:	6163      	str	r3, [r4, #20]
 80047be:	b002      	add	sp, #8
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	466a      	mov	r2, sp
 80047c4:	ab01      	add	r3, sp, #4
 80047c6:	f7ff ffc9 	bl	800475c <__swhatbuf_r>
 80047ca:	9900      	ldr	r1, [sp, #0]
 80047cc:	4605      	mov	r5, r0
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff fba2 	bl	8003f18 <_malloc_r>
 80047d4:	b948      	cbnz	r0, 80047ea <__smakebuf_r+0x44>
 80047d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047da:	059a      	lsls	r2, r3, #22
 80047dc:	d4ef      	bmi.n	80047be <__smakebuf_r+0x18>
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	e7e3      	b.n	80047b2 <__smakebuf_r+0xc>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	6020      	str	r0, [r4, #0]
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	9b00      	ldr	r3, [sp, #0]
 80047f6:	6120      	str	r0, [r4, #16]
 80047f8:	6163      	str	r3, [r4, #20]
 80047fa:	9b01      	ldr	r3, [sp, #4]
 80047fc:	b15b      	cbz	r3, 8004816 <__smakebuf_r+0x70>
 80047fe:	4630      	mov	r0, r6
 8004800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004804:	f000 f838 	bl	8004878 <_isatty_r>
 8004808:	b128      	cbz	r0, 8004816 <__smakebuf_r+0x70>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	431d      	orrs	r5, r3
 800481a:	81a5      	strh	r5, [r4, #12]
 800481c:	e7cf      	b.n	80047be <__smakebuf_r+0x18>

0800481e <memmove>:
 800481e:	4288      	cmp	r0, r1
 8004820:	b510      	push	{r4, lr}
 8004822:	eb01 0402 	add.w	r4, r1, r2
 8004826:	d902      	bls.n	800482e <memmove+0x10>
 8004828:	4284      	cmp	r4, r0
 800482a:	4623      	mov	r3, r4
 800482c:	d807      	bhi.n	800483e <memmove+0x20>
 800482e:	1e43      	subs	r3, r0, #1
 8004830:	42a1      	cmp	r1, r4
 8004832:	d008      	beq.n	8004846 <memmove+0x28>
 8004834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483c:	e7f8      	b.n	8004830 <memmove+0x12>
 800483e:	4601      	mov	r1, r0
 8004840:	4402      	add	r2, r0
 8004842:	428a      	cmp	r2, r1
 8004844:	d100      	bne.n	8004848 <memmove+0x2a>
 8004846:	bd10      	pop	{r4, pc}
 8004848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004850:	e7f7      	b.n	8004842 <memmove+0x24>
	...

08004854 <_fstat_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	2300      	movs	r3, #0
 8004858:	4d06      	ldr	r5, [pc, #24]	; (8004874 <_fstat_r+0x20>)
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	f7fd fc6c 	bl	800213e <_fstat>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d102      	bne.n	8004870 <_fstat_r+0x1c>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	b103      	cbz	r3, 8004870 <_fstat_r+0x1c>
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	bd38      	pop	{r3, r4, r5, pc}
 8004872:	bf00      	nop
 8004874:	20001a38 	.word	0x20001a38

08004878 <_isatty_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	2300      	movs	r3, #0
 800487c:	4d05      	ldr	r5, [pc, #20]	; (8004894 <_isatty_r+0x1c>)
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fd fc6a 	bl	800215c <_isatty>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_isatty_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_isatty_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20001a38 	.word	0x20001a38

08004898 <_sbrk_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	2300      	movs	r3, #0
 800489c:	4d05      	ldr	r5, [pc, #20]	; (80048b4 <_sbrk_r+0x1c>)
 800489e:	4604      	mov	r4, r0
 80048a0:	4608      	mov	r0, r1
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	f7fd fc70 	bl	8002188 <_sbrk>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_sbrk_r+0x1a>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_sbrk_r+0x1a>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	20001a38 	.word	0x20001a38

080048b8 <memchr>:
 80048b8:	4603      	mov	r3, r0
 80048ba:	b510      	push	{r4, lr}
 80048bc:	b2c9      	uxtb	r1, r1
 80048be:	4402      	add	r2, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	d101      	bne.n	80048ca <memchr+0x12>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e003      	b.n	80048d2 <memchr+0x1a>
 80048ca:	7804      	ldrb	r4, [r0, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	428c      	cmp	r4, r1
 80048d0:	d1f6      	bne.n	80048c0 <memchr+0x8>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <memcpy>:
 80048d4:	440a      	add	r2, r1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048dc:	d100      	bne.n	80048e0 <memcpy+0xc>
 80048de:	4770      	bx	lr
 80048e0:	b510      	push	{r4, lr}
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	4291      	cmp	r1, r2
 80048e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ec:	d1f9      	bne.n	80048e2 <memcpy+0xe>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <_realloc_r>:
 80048f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f4:	4680      	mov	r8, r0
 80048f6:	4614      	mov	r4, r2
 80048f8:	460e      	mov	r6, r1
 80048fa:	b921      	cbnz	r1, 8004906 <_realloc_r+0x16>
 80048fc:	4611      	mov	r1, r2
 80048fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	f7ff bb09 	b.w	8003f18 <_malloc_r>
 8004906:	b92a      	cbnz	r2, 8004914 <_realloc_r+0x24>
 8004908:	f7ff fa9e 	bl	8003e48 <_free_r>
 800490c:	4625      	mov	r5, r4
 800490e:	4628      	mov	r0, r5
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004914:	f000 f81b 	bl	800494e <_malloc_usable_size_r>
 8004918:	4284      	cmp	r4, r0
 800491a:	4607      	mov	r7, r0
 800491c:	d802      	bhi.n	8004924 <_realloc_r+0x34>
 800491e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004922:	d812      	bhi.n	800494a <_realloc_r+0x5a>
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff faf6 	bl	8003f18 <_malloc_r>
 800492c:	4605      	mov	r5, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	d0ed      	beq.n	800490e <_realloc_r+0x1e>
 8004932:	42bc      	cmp	r4, r7
 8004934:	4622      	mov	r2, r4
 8004936:	4631      	mov	r1, r6
 8004938:	bf28      	it	cs
 800493a:	463a      	movcs	r2, r7
 800493c:	f7ff ffca 	bl	80048d4 <memcpy>
 8004940:	4631      	mov	r1, r6
 8004942:	4640      	mov	r0, r8
 8004944:	f7ff fa80 	bl	8003e48 <_free_r>
 8004948:	e7e1      	b.n	800490e <_realloc_r+0x1e>
 800494a:	4635      	mov	r5, r6
 800494c:	e7df      	b.n	800490e <_realloc_r+0x1e>

0800494e <_malloc_usable_size_r>:
 800494e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004952:	1f18      	subs	r0, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfbc      	itt	lt
 8004958:	580b      	ldrlt	r3, [r1, r0]
 800495a:	18c0      	addlt	r0, r0, r3
 800495c:	4770      	bx	lr
	...

08004960 <_init>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr

0800496c <_fini>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr
